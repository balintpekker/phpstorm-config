<templateSet group="Drupal 9 - Hook">
  <template name="hook_block_access" value="/**&#10; * Implements hook_block_access().&#10; */&#10;function $MODULE$_block_access(\Drupal\block\Entity\Block $block, $operation, \Drupal\Core\Session\AccountInterface $account) {&#10;  // Example code that would prevent displaying the 'Powered by Drupal' block in&#10;  // a region different than the footer.&#10;  if ($operation == 'view' &amp;&amp; $block-&gt;getPluginId() == 'system_powered_by_block') {&#10;    return AccessResult::forbiddenIf($block-&gt;getRegion() != 'footer')-&gt;addCacheableDependency($block);&#10;  }&#10;&#10;  // No opinion.&#10;  return AccessResult::neutral();&#10;}" shortcut="SPACE" description="hook_block_access()" toReformat="false" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_block_alter" value="/**&#10; * Implements hook_block_alter().&#10; */&#10;function $MODULE$_block_alter(&amp;$definitions) {&#10;  foreach ($definitions as $id =&gt; $definition) {&#10;    if (strpos($id, 'system_menu_block:') === 0) {&#10;&#10;      // Replace $definition properties: id, deriver, class, provider to ones&#10;      // provided by this custom module.&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_block_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_block_build_BASE_BLOCK_ID_alter" value="/**&#10; * Implements hook_block_build_BASE_BLOCK_ID_alter().&#10; */&#10;function $MODULE$_block_build_$BASEBLOCKID$_alter(array &amp;$build, \Drupal\Core\Block\BlockPluginInterface $block) {&#10;&#10;  // Explicitly enable placeholdering of the specific block.&#10;  $build['#create_placeholder'] = TRUE;&#10;}" shortcut="SPACE" description="hook_block_build_BASE_BLOCK_ID_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="BASEBLOCKID" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_block_view_alter" value="/**&#10; * Implements hook_block_view_alter().&#10; */&#10;function $MODULE$_block_view_alter(array &amp;$build, \Drupal\Core\Block\BlockPluginInterface $block) {&#10;&#10;  // Remove the contextual links on all blocks that provide them.&#10;  if (isset($build['#contextual_links'])) {&#10;    unset($build['#contextual_links']);&#10;  }&#10;}" shortcut="SPACE" description="hook_block_view_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_block_view_BASE_BLOCK_ID_alter" value="/**&#10; * Implements hook_block_view_BASE_BLOCK_ID_alter().&#10; */&#10;function $MODULE$_block_view_$BASEBLOCKID$_alter(array &amp;$build, \Drupal\Core\Block\BlockPluginInterface $block) {&#10;&#10;  // Change the title of the specific block.&#10;  $build['#title'] = t('New title of the block');&#10;}" shortcut="SPACE" description="hook_block_view_BASE_BLOCK_ID_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="BASEBLOCKID" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_aggregator_fetcher_info_alter" value="/**&#10; * Implements hook_aggregator_fetcher_info_alter().&#10; */&#10;function $MODULE$_aggregator_fetcher_info_alter(array &amp;$info) {&#10;  if (empty($info['foo_fetcher'])) {&#10;    return;&#10;  }&#10;  $info['foo_fetcher']['class'] = Drupal\foo\Plugin\aggregator\fetcher\FooDefaultFetcher::class;&#10;}" shortcut="SPACE" description="hook_aggregator_fetcher_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_aggregator_parser_info_alter" value="/**&#10; * Implements hook_aggregator_parser_info_alter().&#10; */&#10;function $MODULE$_aggregator_parser_info_alter(array &amp;$info) {&#10;  if (empty($info['foo_parser'])) {&#10;    return;&#10;  }&#10;  $info['foo_parser']['class'] = Drupal\foo\Plugin\aggregator\parser\FooDefaultParser::class;&#10;}" shortcut="SPACE" description="hook_aggregator_parser_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_aggregator_processor_info_alter" value="/**&#10; * Implements hook_aggregator_processor_info_alter().&#10; */&#10;function $MODULE$_aggregator_processor_info_alter(array &amp;$info) {&#10;  if (empty($info['foo_processor'])) {&#10;    return;&#10;  }&#10;  $info['foo_processor']['class'] = Drupal\foo\Plugin\aggregator\processor\FooDefaultProcessor::class;&#10;}" shortcut="SPACE" description="hook_aggregator_processor_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ajax_render_alter" value="/**&#10; * Implements hook_ajax_render_alter().&#10; */&#10;function $MODULE$_ajax_render_alter(array &amp;$data) {&#10;&#10;  // Inject any new status messages into the content area.&#10;  $status_messages = [&#10;    '#type' =&gt; 'status_messages',&#10;  ];&#10;  $command = new \Drupal\Core\Ajax\PrependCommand('#block-system-main .content', \Drupal::service('renderer')&#10;    -&gt;renderRoot($status_messages));&#10;  $data[] = $command&#10;    -&gt;render();&#10;}" shortcut="SPACE" description="hook_ajax_render_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_archiver_info_alter" value="/**&#10; * Implements hook_archiver_info_alter().&#10; */&#10;function $MODULE$_archiver_info_alter(&amp;$info) {&#10;  $info['tar']['extensions'][] = 'tgz';&#10;}" shortcut="SPACE" description="hook_archiver_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_batch_alter" value="/**&#10; * Implements hook_batch_alter().&#10; */&#10;function $MODULE$_batch_alter(&amp;$batch) {&#10;}" shortcut="SPACE" description="hook_batch_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_cache_flush" value="/**&#10; * Implements hook_cache_flush().&#10; */&#10;function $MODULE$_cache_flush() {&#10;  if (defined('MAINTENANCE_MODE') &amp;&amp; MAINTENANCE_MODE == 'update') {&#10;    _update_cache_clear();&#10;  }&#10;}" shortcut="SPACE" description="hook_cache_flush()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ckeditor_css_alter" value="/**&#10; * Implements hook_ckeditor_css_alter().&#10; */&#10;function $MODULE$_ckeditor_css_alter(array &amp;$css, Editor $editor) {&#10;  $css[] = drupal_get_path('module', 'mymodule') . '/css/mymodule-ckeditor.css';&#10;}" shortcut="SPACE" description="hook_ckeditor_css_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ckeditor_plugin_info_alter" value="/**&#10; * Implements hook_ckeditor_plugin_info_alter().&#10; */&#10;function $MODULE$_ckeditor_plugin_info_alter(array &amp;$plugins) {&#10;  $plugins['someplugin']['label'] = t('Better name');&#10;}" shortcut="SPACE" description="hook_ckeditor_plugin_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_comment_links_alter" value="/**&#10; * Implements hook_comment_links_alter().&#10; */&#10;function $MODULE$_comment_links_alter(array &amp;$links, CommentInterface $entity, array &amp;$context) {&#10;  $links['mymodule'] = [&#10;    '#theme' =&gt; 'links__comment__mymodule',&#10;    '#attributes' =&gt; [&#10;      'class' =&gt; [&#10;        'links',&#10;        'inline',&#10;      ],&#10;    ],&#10;    '#links' =&gt; [&#10;      'comment-report' =&gt; [&#10;        'title' =&gt; t('Report'),&#10;        'url' =&gt; Url::fromRoute('comment_test.report', [&#10;          'comment' =&gt; $entity&#10;            -&gt;id(),&#10;        ], [&#10;          'query' =&gt; [&#10;            'token' =&gt; \Drupal::getContainer()&#10;              -&gt;get('csrf_token')&#10;              -&gt;get(&quot;comment/{$entity-&gt;id()}/report&quot;),&#10;          ],&#10;        ]),&#10;      ],&#10;    ],&#10;  ];&#10;}" shortcut="SPACE" description="hook_comment_links_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_config_import_steps_alter" value="/**&#10; * Implements hook_config_import_steps_alter().&#10; */&#10;function $MODULE$_config_import_steps_alter(&amp;$sync_steps, \Drupal\Core\Config\ConfigImporter $config_importer) {&#10;  $deletes = $config_importer&#10;    -&gt;getUnprocessedConfiguration('delete');&#10;  if (isset($deletes['field.storage.node.body'])) {&#10;    $sync_steps[] = '_additional_configuration_step';&#10;  }&#10;}" shortcut="SPACE" description="hook_config_import_steps_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_config_schema_info_alter" value="/**&#10; * Implements hook_config_schema_info_alter().&#10; */&#10;function $MODULE$_config_schema_info_alter(&amp;$definitions) {&#10;&#10;  // Enhance the text and date type definitions with classes to generate proper&#10;  // form elements in ConfigTranslationFormBase. Other translatable types will&#10;  // appear as a one line textfield.&#10;  $definitions['text']['form_element_class'] = '\\Drupal\\config_translation\\FormElement\\Textarea';&#10;  $definitions['date_format']['form_element_class'] = '\\Drupal\\config_translation\\FormElement\\DateFormat';&#10;}" shortcut="SPACE" description="hook_config_schema_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_config_translation_info" value="/**&#10; * Implements hook_config_translation_info().&#10; */&#10;function $MODULE$_config_translation_info(&amp;$info) {&#10;  $entity_type_manager = \Drupal::entityTypeManager();&#10;  $route_provider = \Drupal::service('router.route_provider');&#10;&#10;  // If field UI is not enabled, the base routes of the type&#10;  // &quot;entity.field_config.{$entity_type}_field_edit_form&quot; are not defined.&#10;  if (\Drupal::moduleHandler()&#10;    -&gt;moduleExists('field_ui')) {&#10;&#10;    // Add fields entity mappers to all fieldable entity types defined.&#10;    foreach ($entity_type_manager&#10;      -&gt;getDefinitions() as $entity_type_id =&gt; $entity_type) {&#10;      $base_route = NULL;&#10;      try {&#10;        $base_route = $route_provider&#10;          -&gt;getRouteByName('entity.field_config.' . $entity_type_id . '_field_edit_form');&#10;      } catch (RouteNotFoundException $e) {&#10;&#10;        // Ignore non-existent routes.&#10;      }&#10;&#10;      // Make sure entity type has field UI enabled and has a base route.&#10;      if ($entity_type&#10;        -&gt;get('field_ui_base_route') &amp;&amp; !empty($base_route)) {&#10;        $info[$entity_type_id . '_fields'] = [&#10;          'base_route_name' =&gt; 'entity.field_config.' . $entity_type_id . '_field_edit_form',&#10;          'entity_type' =&gt; 'field_config',&#10;          'title' =&gt; t('Title'),&#10;          'class' =&gt; '\\Drupal\\config_translation\\ConfigFieldMapper',&#10;          'base_entity_type' =&gt; $entity_type_id,&#10;          'weight' =&gt; 10,&#10;        ];&#10;      }&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_config_translation_info()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_config_translation_info_alter" value="/**&#10; * Implements hook_config_translation_info_alter().&#10; */&#10;function $MODULE$_config_translation_info_alter(&amp;$info) {&#10;&#10;  // Add additional site settings to the site information screen, so it shows&#10;  // up on the translation screen. (Form alter in the elements whose values are&#10;  // stored in this config file using regular form altering on the original&#10;  // configuration form.)&#10;  $info['system.site_information_settings']['names'][] = 'example.site.setting';&#10;}" shortcut="SPACE" description="hook_config_translation_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_contextual_links_alter" value="/**&#10; * Implements hook_contextual_links_alter().&#10; */&#10;function $MODULE$_contextual_links_alter(array &amp;$links, $group, array $route_parameters) {&#10;  if ($group == 'menu') {&#10;&#10;    // Dynamically use the menu name for the title of the menu_edit contextual&#10;    // link.&#10;    $menu = \Drupal::entityTypeManager()&#10;      -&gt;getStorage('menu')&#10;      -&gt;load($route_parameters['menu']);&#10;    $links['menu_edit']['title'] = t('Edit menu: @label', [&#10;      '@label' =&gt; $menu&#10;        -&gt;label(),&#10;    ]);&#10;  }&#10;}" shortcut="SPACE" description="hook_contextual_links_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_contextual_links_plugins_alter" value="/**&#10; * Implements hook_contextual_links_plugins_alter().&#10; */&#10;function $MODULE$_contextual_links_plugins_alter(array &amp;$contextual_links) {&#10;  $contextual_links['menu_edit']['title'] = 'Edit the menu';&#10;}" shortcut="SPACE" description="hook_contextual_links_plugins_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_contextual_links_view_alter" value="/**&#10; * Implements hook_contextual_links_view_alter().&#10; */&#10;function $MODULE$_contextual_links_view_alter(&amp;$element, $items) {&#10;&#10;  // Add another class to all contextual link lists to facilitate custom&#10;  // styling.&#10;  $element['#attributes']['class'][] = 'custom-class';&#10;}" shortcut="SPACE" description="hook_contextual_links_view_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_countries_alter" value="/**&#10; * Implements hook_countries_alter().&#10; */&#10;function $MODULE$_countries_alter(&amp;$countries) {&#10;&#10;  // Elbonia is now independent, so add it to the country list.&#10;  $countries['EB'] = 'Elbonia';&#10;}" shortcut="SPACE" description="hook_countries_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_cron" value="/**&#10; * Implements hook_cron().&#10; */&#10;function $MODULE$_cron() {&#10;&#10;  // Short-running operation example, not using a queue:&#10;  // Delete all expired records since the last cron run.&#10;  $expires = \Drupal::state()&#10;    -&gt;get('mymodule.last_check', 0);&#10;  \Drupal::database()&#10;    -&gt;delete('mymodule_table')&#10;    -&gt;condition('expires', $expires, '&gt;=')&#10;    -&gt;execute();&#10;  \Drupal::state()&#10;    -&gt;set('mymodule.last_check', REQUEST_TIME);&#10;&#10;  // Long-running operation example, leveraging a queue:&#10;  // Queue news feeds for updates once their refresh interval has elapsed.&#10;  $queue = \Drupal::queue('aggregator_feeds');&#10;  $ids = \Drupal::entityTypeManager()&#10;    -&gt;getStorage('aggregator_feed')&#10;    -&gt;getFeedIdsToRefresh();&#10;  foreach (Feed::loadMultiple($ids) as $feed) {&#10;    if ($queue&#10;      -&gt;createItem($feed)) {&#10;&#10;      // Add timestamp to avoid queueing item more than once.&#10;      $feed&#10;        -&gt;setQueuedTime(REQUEST_TIME);&#10;      $feed&#10;        -&gt;save();&#10;    }&#10;  }&#10;  $ids = \Drupal::entityQuery('aggregator_feed')&#10;    -&gt;accessCheck(FALSE)&#10;    -&gt;condition('queued', REQUEST_TIME - 3600 * 6, '&lt;')&#10;    -&gt;execute();&#10;  if ($ids) {&#10;    $feeds = Feed::loadMultiple($ids);&#10;    foreach ($feeds as $feed) {&#10;      $feed&#10;        -&gt;setQueuedTime(0);&#10;      $feed&#10;        -&gt;save();&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_cron()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_css_alter" value="/**&#10; * Implements hook_css_alter().&#10; */&#10;function $MODULE$_css_alter(&amp;$css, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {&#10;&#10;  // Remove defaults.css file.&#10;  unset($css[drupal_get_path('module', 'system') . '/defaults.css']);&#10;}" shortcut="SPACE" description="hook_css_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_display_variant_plugin_alter" value="/**&#10; * Implements hook_display_variant_plugin_alter().&#10; */&#10;function $MODULE$_display_variant_plugin_alter(array &amp;$definitions) {&#10;  $definitions['full_page']['admin_label'] = t('Block layout');&#10;}" shortcut="SPACE" description="hook_display_variant_plugin_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_editor_info_alter" value="/**&#10; * Implements hook_editor_info_alter().&#10; */&#10;function $MODULE$_editor_info_alter(array &amp;$editors) {&#10;  $editors['some_other_editor']['label'] = t('A different name');&#10;  $editors['some_other_editor']['library']['module'] = 'my_editor_override';&#10;}" shortcut="SPACE" description="hook_editor_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_editor_js_settings_alter" value="/**&#10; * Implements hook_editor_js_settings_alter().&#10; */&#10;function $MODULE$_editor_js_settings_alter(array &amp;$settings) {&#10;  if (isset($settings['editor']['formats']['basic_html'])) {&#10;    $settings['editor']['formats']['basic_html']['editor'] = 'MyDifferentEditor';&#10;    $settings['editor']['formats']['basic_html']['editorSettings']['buttons'] = [&#10;      'strong',&#10;      'italic',&#10;      'underline',&#10;    ];&#10;  }&#10;}" shortcut="SPACE" description="hook_editor_js_settings_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_editor_xss_filter_alter" value="/**&#10; * Implements hook_editor_xss_filter_alter().&#10; */&#10;function $MODULE$_editor_xss_filter_alter(&amp;$editor_xss_filter_class, FilterFormatInterface $format, FilterFormatInterface $original_format = NULL) {&#10;  $filters = $format&#10;    -&gt;filters()&#10;    -&gt;getAll();&#10;  if (isset($filters['filter_wysiwyg']) &amp;&amp; $filters['filter_wysiwyg']-&gt;status) {&#10;    $editor_xss_filter_class = '\\Drupal\\filter_wysiwyg\\EditorXssFilter\\WysiwygFilter';&#10;  }&#10;}" shortcut="SPACE" description="hook_editor_xss_filter_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_element_info_alter" value="/**&#10; * Implements hook_element_info_alter().&#10; */&#10;function $MODULE$_element_info_alter(array &amp;$info) {&#10;&#10;  // Decrease the default size of textfields.&#10;  if (isset($info['textfield']['#size'])) {&#10;    $info['textfield']['#size'] = 40;&#10;  }&#10;}" shortcut="SPACE" description="hook_element_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_element_plugin_alter" value="/**&#10; * Implements hook_element_plugin_alter().&#10; */&#10;function $MODULE$_element_plugin_alter(array &amp;$definitions) {&#10;&#10;  // Use a custom class for the LayoutBuilder element.&#10;  $definitions['layout_builder']['class'] = '\\Drupal\\mymodule\\Element\\MyLayoutBuilderElement';&#10;}" shortcut="SPACE" description="hook_element_plugin_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_access" value="/**&#10; * Implements hook_entity_access().&#10; */&#10;function $MODULE$_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {&#10;&#10;  // No opinion.&#10;  return AccessResult::neutral();&#10;}" shortcut="SPACE" description="hook_entity_access()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_base_field_info" value="/**&#10; * Implements hook_entity_base_field_info().&#10; */&#10;function $MODULE$_entity_base_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {&#10;  if ($entity_type&#10;    -&gt;id() == 'node') {&#10;    $fields = [];&#10;    $fields['mymodule_text'] = BaseFieldDefinition::create('string')&#10;      -&gt;setLabel(t('The text'))&#10;      -&gt;setDescription(t('A text property added by mymodule.'))&#10;      -&gt;setComputed(TRUE)&#10;      -&gt;setClass('\\Drupal\\mymodule\\EntityComputedText');&#10;    return $fields;&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_base_field_info()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_base_field_info_alter" value="/**&#10; * Implements hook_entity_base_field_info_alter().&#10; */&#10;function $MODULE$_entity_base_field_info_alter(&amp;$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type) {&#10;&#10;  // Alter the mymodule_text field to use a custom class.&#10;  if ($entity_type&#10;    -&gt;id() == 'node' &amp;&amp; !empty($fields['mymodule_text'])) {&#10;    $fields['mymodule_text']&#10;      -&gt;setClass('\\Drupal\\anothermodule\\EntityComputedText');&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_base_field_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_build_defaults_alter" value="/**&#10; * Implements hook_entity_build_defaults_alter().&#10; */&#10;function $MODULE$_entity_build_defaults_alter(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, $view_mode) {&#10;}" shortcut="SPACE" description="hook_entity_build_defaults_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_bundle_create" value="/**&#10; * Implements hook_entity_bundle_create().&#10; */&#10;function $MODULE$_entity_bundle_create($entity_type_id, $bundle) {&#10;&#10;  // When a new bundle is created, the menu needs to be rebuilt to add the&#10;  // Field UI menu item tabs.&#10;  \Drupal::service('router.builder')&#10;    -&gt;setRebuildNeeded();&#10;}" shortcut="SPACE" description="hook_entity_bundle_create()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_bundle_delete" value="/**&#10; * Implements hook_entity_bundle_delete().&#10; */&#10;function $MODULE$_entity_bundle_delete($entity_type_id, $bundle) {&#10;&#10;  // Remove the settings associated with the bundle in my_module.settings.&#10;  $config = \Drupal::config('my_module.settings');&#10;  $bundle_settings = $config&#10;    -&gt;get('bundle_settings');&#10;  if (isset($bundle_settings[$entity_type_id][$bundle])) {&#10;    unset($bundle_settings[$entity_type_id][$bundle]);&#10;    $config&#10;      -&gt;set('bundle_settings', $bundle_settings);&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_bundle_delete()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_bundle_field_info" value="/**&#10; * Implements hook_entity_bundle_field_info().&#10; */&#10;function $MODULE$_entity_bundle_field_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {&#10;&#10;  // Add a property only to nodes of the 'article' bundle.&#10;  if ($entity_type&#10;    -&gt;id() == 'node' &amp;&amp; $bundle == 'article') {&#10;    $fields = [];&#10;    $storage_definitions = mymodule_entity_field_storage_info($entity_type);&#10;    $fields['mymodule_bundle_field'] = FieldDefinition::createFromFieldStorageDefinition($storage_definitions['mymodule_bundle_field'])&#10;      -&gt;setLabel(t('Bundle Field'));&#10;    return $fields;&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_bundle_field_info()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_bundle_field_info_alter" value="/**&#10; * Implements hook_entity_bundle_field_info_alter().&#10; */&#10;function $MODULE$_entity_bundle_field_info_alter(&amp;$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type, $bundle) {&#10;  if ($entity_type&#10;    -&gt;id() == 'node' &amp;&amp; $bundle == 'article' &amp;&amp; !empty($fields['mymodule_text'])) {&#10;&#10;    // Alter the mymodule_text field to use a custom class.&#10;    $fields['mymodule_text']&#10;      -&gt;setClass('\\Drupal\\anothermodule\\EntityComputedText');&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_bundle_field_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_bundle_info" value="/**&#10; * Implements hook_entity_bundle_info().&#10; */&#10;function $MODULE$_entity_bundle_info() {&#10;  $bundles['user']['user']['label'] = t('User');&#10;  return $bundles;&#10;}" shortcut="SPACE" description="hook_entity_bundle_info()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_bundle_info_alter" value="/**&#10; * Implements hook_entity_bundle_info_alter().&#10; */&#10;function $MODULE$_entity_bundle_info_alter(&amp;$bundles) {&#10;  $bundles['user']['user']['label'] = t('Full account');&#10;}" shortcut="SPACE" description="hook_entity_bundle_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_create" value="/**&#10; * Implements hook_entity_create().&#10; */&#10;function $MODULE$_entity_create(\Drupal\Core\Entity\EntityInterface $entity) {&#10;  \Drupal::logger('example')&#10;    -&gt;info('Entity created: @label', [&#10;    '@label' =&gt; $entity&#10;      -&gt;label(),&#10;  ]);&#10;}" shortcut="SPACE" description="hook_entity_create()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_create_access" value="/**&#10; * Implements hook_entity_create_access().&#10; */&#10;function $MODULE$_entity_create_access(\Drupal\Core\Session\AccountInterface $account, array $context, $entity_bundle) {&#10;&#10;  // No opinion.&#10;  return AccessResult::neutral();&#10;}" shortcut="SPACE" description="hook_entity_create_access()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_delete" value="/**&#10; * Implements hook_entity_delete().&#10; */&#10;function $MODULE$_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {&#10;&#10;  // Delete the entity's entry from a fictional table of all entities.&#10;  \Drupal::database()&#10;    -&gt;delete('example_entity')&#10;    -&gt;condition('type', $entity&#10;    -&gt;getEntityTypeId())&#10;    -&gt;condition('id', $entity&#10;    -&gt;id())&#10;    -&gt;execute();&#10;}" shortcut="SPACE" description="hook_entity_delete()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_display_build_alter" value="/**&#10; * Implements hook_entity_display_build_alter().&#10; */&#10;function $MODULE$_entity_display_build_alter(&amp;$build, $context) {&#10;&#10;  // Append RDF term mappings on displayed taxonomy links.&#10;  foreach (Element::children($build) as $field_name) {&#10;    $element =&amp; $build[$field_name];&#10;    if ($element['#field_type'] == 'entity_reference' &amp;&amp; $element['#formatter'] == 'entity_reference_label') {&#10;      foreach ($element['#items'] as $delta =&gt; $item) {&#10;        $term = $item-&gt;entity;&#10;        if (!empty($term-&gt;rdf_mapping['rdftype'])) {&#10;          $element[$delta]['#options']['attributes']['typeof'] = $term-&gt;rdf_mapping['rdftype'];&#10;        }&#10;        if (!empty($term-&gt;rdf_mapping['name']['predicates'])) {&#10;          $element[$delta]['#options']['attributes']['property'] = $term-&gt;rdf_mapping['name']['predicates'];&#10;        }&#10;      }&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_display_build_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_extra_field_info_alter" value="/**&#10; * Implements hook_entity_extra_field_info_alter().&#10; */&#10;function hook_entity_extra_field_info_alter(&amp;$info) {&#10;&#10;  // Force node title to always be at the top of the list by default.&#10;  foreach (NodeType::loadMultiple() as $bundle) {&#10;    if (isset($info['node'][$bundle&#10;      -&gt;id()]['form']['title'])) {&#10;      $info['node'][$bundle&#10;        -&gt;id()]['form']['title']['weight'] = -20;&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_extra_field_info_alter()" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_field_access" value="/**&#10; * Implements hook_entity_field_access().&#10; */&#10;function $MODULE$_entity_field_access($operation, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, \Drupal\Core\Session\AccountInterface $account, \Drupal\Core\Field\FieldItemListInterface $items = NULL) {&#10;  if ($field_definition&#10;    -&gt;getName() == 'field_of_interest' &amp;&amp; $operation == 'edit') {&#10;    return AccessResult::allowedIfHasPermission($account, 'update field of interest');&#10;  }&#10;  return AccessResult::neutral();&#10;}" shortcut="SPACE" description="hook_entity_field_access()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_field_access_alter" value="/**&#10; * Implements hook_entity_field_access_alter().&#10; */&#10;function $MODULE$_entity_field_access_alter(array &amp;$grants, array $context) {&#10;&#10;  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */&#10;  $field_definition = $context['field_definition'];&#10;  if ($field_definition&#10;    -&gt;getName() == 'field_of_interest' &amp;&amp; $grants['node']&#10;    -&gt;isForbidden()) {&#10;&#10;    // Override node module's restriction to no opinion (neither allowed nor&#10;    // forbidden). We don't want to provide our own access hook, we only want to&#10;    // take out node module's part in the access handling of this field. We also&#10;    // don't want to switch node module's grant to&#10;    // AccessResultInterface::isAllowed() , because the grants of other modules&#10;    // should still decide on their own if this field is accessible or not&#10;    $grants['node'] = AccessResult::neutral()&#10;      -&gt;inheritCacheability($grants['node']);&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_field_access_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_field_storage_info" value="/**&#10; * Implements hook_entity_field_storage_info().&#10; */&#10;function $MODULE$_entity_field_storage_info(\Drupal\Core\Entity\EntityTypeInterface $entity_type) {&#10;  if (\Drupal::entityTypeManager()&#10;    -&gt;getStorage($entity_type&#10;    -&gt;id()) instanceof DynamicallyFieldableEntityStorageInterface) {&#10;&#10;    // Query by filtering on the ID as this is more efficient than filtering&#10;    // on the entity_type property directly.&#10;    $ids = \Drupal::entityQuery('field_storage_config')&#10;      -&gt;condition('id', $entity_type&#10;      -&gt;id() . '.', 'STARTS_WITH')&#10;      -&gt;execute();&#10;&#10;    // Fetch all fields and key them by field name.&#10;    $field_storages = FieldStorageConfig::loadMultiple($ids);&#10;    $result = [];&#10;    foreach ($field_storages as $field_storage) {&#10;      $result[$field_storage&#10;        -&gt;getName()] = $field_storage;&#10;    }&#10;    return $result;&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_field_storage_info()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_field_storage_info_alter" value="/**&#10; * Implements hook_entity_field_storage_info_alter().&#10; */&#10;function $MODULE$_entity_field_storage_info_alter(&amp;$fields, \Drupal\Core\Entity\EntityTypeInterface $entity_type) {&#10;&#10;  // Alter the max_length setting.&#10;  if ($entity_type&#10;    -&gt;id() == 'node' &amp;&amp; !empty($fields['mymodule_text'])) {&#10;    $fields['mymodule_text']&#10;      -&gt;setSetting('max_length', 128);&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_field_storage_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_field_values_init" value="/**&#10; * Implements hook_entity_field_values_init().&#10; */&#10;function $MODULE$_entity_field_values_init(\Drupal\Core\Entity\FieldableEntityInterface $entity) {&#10;  if ($entity instanceof \Drupal\Core\Entity\ContentEntityInterface &amp;&amp; !$entity-&gt;foo-&gt;value) {&#10;    $entity-&gt;foo-&gt;value = 'some_initial_value';&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_field_values_init()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_form_display_alter" value="/**&#10; * Implements hook_entity_form_display_alter().&#10; */&#10;function $MODULE$_entity_form_display_alter(\Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display, array $context) {&#10;&#10;  // Hide the 'user_picture' field from the register form.&#10;  if ($context['entity_type'] == 'user' &amp;&amp; $context['form_mode'] == 'register') {&#10;    $form_display&#10;      -&gt;setComponent('user_picture', [&#10;      'region' =&gt; 'hidden',&#10;    ]);&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_form_display_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_insert" value="/**&#10; * Implements hook_entity_insert().&#10; */&#10;function $MODULE$_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {&#10;&#10;  // Insert the new entity into a fictional table of all entities.&#10;  \Drupal::database()&#10;    -&gt;insert('example_entity')&#10;    -&gt;fields([&#10;    'type' =&gt; $entity&#10;      -&gt;getEntityTypeId(),&#10;    'id' =&gt; $entity&#10;      -&gt;id(),&#10;    'created' =&gt; REQUEST_TIME,&#10;    'updated' =&gt; REQUEST_TIME,&#10;  ])&#10;    -&gt;execute();&#10;}" shortcut="SPACE" description="hook_entity_insert()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_load" value="/**&#10; * Implements hook_entity_load().&#10; */&#10;function $MODULE$_entity_load(array $entities, $entity_type_id) {&#10;  foreach ($entities as $entity) {&#10;    $entity-&gt;foo = mymodule_add_something($entity);&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_load()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_operation" value="/**&#10; * Implements hook_entity_operation().&#10; */&#10;function $MODULE$_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {&#10;  $operations = [];&#10;  $operations['translate'] = [&#10;    'title' =&gt; t('Translate'),&#10;    'url' =&gt; \Drupal\Core\Url::fromRoute('foo_module.entity.translate'),&#10;    'weight' =&gt; 50,&#10;  ];&#10;  return $operations;&#10;}" shortcut="SPACE" description="hook_entity_operation()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_operation_alter" value="/**&#10; * Implements hook_entity_operation_alter().&#10; */&#10;function $MODULE$_entity_operation_alter(array &amp;$operations, \Drupal\Core\Entity\EntityInterface $entity) {&#10;&#10;  // Alter the title and weight.&#10;  $operations['translate']['title'] = t('Translate @entity_type', [&#10;    '@entity_type' =&gt; $entity&#10;      -&gt;getEntityTypeId(),&#10;  ]);&#10;  $operations['translate']['weight'] = 99;&#10;}" shortcut="SPACE" description="hook_entity_operation_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_predelete" value="/**&#10; * Implements hook_entity_predelete().&#10; */&#10;function $MODULE$_entity_predelete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  $connection = \Drupal::database();&#10;&#10;  // Count references to this entity in a custom table before they are removed&#10;  // upon entity deletion.&#10;  $id = $entity&#10;    -&gt;id();&#10;  $type = $entity&#10;    -&gt;getEntityTypeId();&#10;  $count = \Drupal::database()&#10;    -&gt;select('example_entity_data')&#10;    -&gt;condition('type', $type)&#10;    -&gt;condition('id', $id)&#10;    -&gt;countQuery()&#10;    -&gt;execute()&#10;    -&gt;fetchField();&#10;&#10;  // Log the count in a table that records this statistic for deleted entities.&#10;  $connection&#10;    -&gt;merge('example_deleted_entity_statistics')&#10;    -&gt;key([&#10;    'type' =&gt; $type,&#10;    'id' =&gt; $id,&#10;  ])&#10;    -&gt;fields([&#10;    'count' =&gt; $count,&#10;  ])&#10;    -&gt;execute();&#10;}" shortcut="SPACE" description="hook_entity_predelete()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_preload" value="/**&#10; * Implements hook_entity_preload().&#10; */&#10;function $MODULE$_entity_preload(array $ids, $entity_type_id) {&#10;  $entities = [];&#10;  foreach ($ids as $id) {&#10;    $entities[] = mymodule_swap_revision($id);&#10;  }&#10;  return $entities;&#10;}" shortcut="SPACE" description="hook_entity_preload()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_prepare_form" value="/**&#10; * Implements hook_entity_prepare_form().&#10; */&#10;function $MODULE$_entity_prepare_form(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Form\FormStateInterface $form_state) {&#10;  if ($operation == 'edit') {&#10;    $entity-&gt;label-&gt;value = 'Altered label';&#10;    $form_state&#10;      -&gt;set('label_altered', TRUE);&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_prepare_form()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_prepare_view" value="/**&#10; * Implements hook_entity_prepare_view().&#10; */&#10;function $MODULE$_entity_prepare_view($entity_type_id, array $entities, array $displays, $view_mode) {&#10;&#10;  // Load a specific node into the user object for later theming.&#10;  if (!empty($entities) &amp;&amp; $entity_type_id == 'user') {&#10;&#10;    // Only do the extra work if the component is configured to be&#10;    // displayed. This assumes a 'mymodule_addition' extra field has been&#10;    // defined for the entity bundle in hook_entity_extra_field_info().&#10;    $ids = [];&#10;    foreach ($entities as $id =&gt; $entity) {&#10;      if ($displays[$entity&#10;        -&gt;bundle()]&#10;        -&gt;getComponent('mymodule_addition')) {&#10;        $ids[] = $id;&#10;      }&#10;    }&#10;    if ($ids) {&#10;      $nodes = mymodule_get_user_nodes($ids);&#10;      foreach ($ids as $id) {&#10;        $entities[$id]-&gt;user_node = $nodes[$id];&#10;      }&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_prepare_view()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_presave" value="/**&#10; * Implements hook_entity_presave().&#10; */&#10;function $MODULE$_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {&#10;  if ($entity instanceof ContentEntityInterface &amp;&amp; $entity&#10;    -&gt;isTranslatable()) {&#10;    $route_match = \Drupal::routeMatch();&#10;    \Drupal::service('content_translation.synchronizer')&#10;      -&gt;synchronizeFields($entity, $entity&#10;      -&gt;language()&#10;      -&gt;getId(), $route_match&#10;      -&gt;getParameter('source_langcode'));&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_presave()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_revision_create" value="/**&#10; * Implements hook_entity_revision_create().&#10; */&#10;function $MODULE$_entity_revision_create(Drupal\Core\Entity\EntityInterface $new_revision, Drupal\Core\Entity\EntityInterface $entity, $keep_untranslatable_fields) {&#10;&#10;  // Retain the value from an untranslatable field, which are by default&#10;  // synchronized from the default revision.&#10;  $new_revision&#10;    -&gt;set('untranslatable_field', $entity&#10;    -&gt;get('untranslatable_field'));&#10;}" shortcut="SPACE" description="hook_entity_revision_create()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_revision_delete" value="/**&#10; * Implements hook_entity_revision_delete().&#10; */&#10;function $MODULE$_entity_revision_delete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  $referenced_files_by_field = _editor_get_file_uuids_by_field($entity);&#10;  foreach ($referenced_files_by_field as $field =&gt; $uuids) {&#10;    _editor_delete_file_usage($uuids, $entity, 1);&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_revision_delete()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_storage_load" value="/**&#10; * Implements hook_entity_storage_load().&#10; */&#10;function $MODULE$_entity_storage_load(array $entities, $entity_type) {&#10;  foreach ($entities as $entity) {&#10;    $entity-&gt;foo = mymodule_add_something_uncached($entity);&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_storage_load()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_translation_create" value="/**&#10; * Implements hook_entity_translation_create().&#10; */&#10;function $MODULE$_entity_translation_create(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  \Drupal::logger('example')&#10;    -&gt;info('Entity translation created: @label', [&#10;    '@label' =&gt; $translation&#10;      -&gt;label(),&#10;  ]);&#10;}" shortcut="SPACE" description="hook_entity_translation_create()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_translation_delete" value="/**&#10; * Implements hook_entity_translation_delete().&#10; */&#10;function $MODULE$_entity_translation_delete(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  $variables = [&#10;    '@language' =&gt; $translation&#10;      -&gt;language()&#10;      -&gt;getName(),&#10;    '@label' =&gt; $translation&#10;      -&gt;label(),&#10;  ];&#10;  \Drupal::logger('example')&#10;    -&gt;notice('The @language translation of @label has just been deleted.', $variables);&#10;}" shortcut="SPACE" description="hook_entity_translation_delete()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_translation_insert" value="/**&#10; * Implements hook_entity_translation_insert().&#10; */&#10;function $MODULE$_entity_translation_insert(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  $variables = [&#10;    '@language' =&gt; $translation&#10;      -&gt;language()&#10;      -&gt;getName(),&#10;    '@label' =&gt; $translation&#10;      -&gt;getUntranslated()&#10;      -&gt;label(),&#10;  ];&#10;  \Drupal::logger('example')&#10;    -&gt;notice('The @language translation of @label has just been stored.', $variables);&#10;}" shortcut="SPACE" description="hook_entity_translation_insert()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_access" value="/**&#10; * Implements hook_ENTITY_TYPE_access().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {&#10;&#10;  // No opinion.&#10;  return AccessResult::neutral();&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_access()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_type_alter" value="/**&#10; * Implements hook_entity_type_alter().&#10; */&#10;function $MODULE$_entity_type_alter(array &amp;$entity_types) {&#10;&#10;  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */&#10;&#10;  // Set the controller class for nodes to an alternate implementation of the&#10;  // Drupal\Core\Entity\EntityStorageInterface interface.&#10;  $entity_types['node']&#10;    -&gt;setStorageClass('Drupal\\mymodule\\MyCustomNodeStorage');&#10;}" shortcut="SPACE" description="hook_entity_type_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_type_build" value="/**&#10; * Implements hook_entity_type_build().&#10; */&#10;function $MODULE$_entity_type_build(array &amp;$entity_types) {&#10;&#10;  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */&#10;&#10;  // Add a form for a custom node form without overriding the default&#10;  // node form. To override the default node form, use hook_entity_type_alter().&#10;  $entity_types['node']&#10;    -&gt;setFormClass('mymodule_foo', 'Drupal\\mymodule\\NodeFooForm');&#10;}" shortcut="SPACE" description="hook_entity_type_build()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_build_defaults_alter" value="/**&#10; * Implements hook_ENTITY_TYPE_build_defaults_alter().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_build_defaults_alter(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, $view_mode) {&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_build_defaults_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_create" value="/**&#10; * Implements hook_ENTITY_TYPE_create().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_create(\Drupal\Core\Entity\EntityInterface $entity) {&#10;  \Drupal::logger('example')&#10;    -&gt;info('ENTITY_TYPE created: @label', [&#10;    '@label' =&gt; $entity&#10;      -&gt;label(),&#10;  ]);&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_create()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_create_access" value="/**&#10; * Implements hook_ENTITY_TYPE_create_access().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_create_access(\Drupal\Core\Session\AccountInterface $account, array $context, $entity_bundle) {&#10;&#10;  // No opinion.&#10;  return AccessResult::neutral();&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_create_access()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_delete" value="/**&#10; * Implements hook_ENTITY_TYPE_delete().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_delete(Drupal\Core\Entity\EntityInterface $entity) {&#10;&#10;  // Delete the entity's entry from a fictional table of all entities.&#10;  \Drupal::database()&#10;    -&gt;delete('example_entity')&#10;    -&gt;condition('type', $entity&#10;    -&gt;getEntityTypeId())&#10;    -&gt;condition('id', $entity&#10;    -&gt;id())&#10;    -&gt;execute();&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_delete()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_field_values_init" value="/**&#10; * Implements hook_ENTITY_TYPE_field_values_init().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_field_values_init(\Drupal\Core\Entity\FieldableEntityInterface $entity) {&#10;  if (!$entity-&gt;foo-&gt;value) {&#10;    $entity-&gt;foo-&gt;value = 'some_initial_value';&#10;  }&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_field_values_init()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_insert" value="/**&#10; * Implements hook_ENTITY_TYPE_insert().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_insert(Drupal\Core\Entity\EntityInterface $entity) {&#10;&#10;  // Insert the new entity into a fictional table of this type of entity.&#10;  \Drupal::database()&#10;    -&gt;insert('example_entity')&#10;    -&gt;fields([&#10;    'id' =&gt; $entity&#10;      -&gt;id(),&#10;    'created' =&gt; REQUEST_TIME,&#10;    'updated' =&gt; REQUEST_TIME,&#10;  ])&#10;    -&gt;execute();&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_insert()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_load" value="/**&#10; * Implements hook_ENTITY_TYPE_load().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_load($entities) {&#10;  foreach ($entities as $entity) {&#10;    $entity-&gt;foo = mymodule_add_something($entity);&#10;  }&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_load()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_predelete" value="/**&#10; * Implements hook_ENTITY_TYPE_predelete().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_predelete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  $connection = \Drupal::database();&#10;&#10;  // Count references to this entity in a custom table before they are removed&#10;  // upon entity deletion.&#10;  $id = $entity&#10;    -&gt;id();&#10;  $type = $entity&#10;    -&gt;getEntityTypeId();&#10;  $count = \Drupal::database()&#10;    -&gt;select('example_entity_data')&#10;    -&gt;condition('type', $type)&#10;    -&gt;condition('id', $id)&#10;    -&gt;countQuery()&#10;    -&gt;execute()&#10;    -&gt;fetchField();&#10;&#10;  // Log the count in a table that records this statistic for deleted entities.&#10;  $connection&#10;    -&gt;merge('example_deleted_entity_statistics')&#10;    -&gt;key([&#10;    'type' =&gt; $type,&#10;    'id' =&gt; $id,&#10;  ])&#10;    -&gt;fields([&#10;    'count' =&gt; $count,&#10;  ])&#10;    -&gt;execute();&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_predelete()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_prepare_form" value="/**&#10; * Implements hook_ENTITY_TYPE_prepare_form().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_prepare_form(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Form\FormStateInterface $form_state) {&#10;  if ($operation == 'edit') {&#10;    $entity-&gt;label-&gt;value = 'Altered label';&#10;    $form_state&#10;      -&gt;set('label_altered', TRUE);&#10;  }&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_prepare_form()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_presave" value="/**&#10; * Implements hook_ENTITY_TYPE_presave().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_presave(Drupal\Core\Entity\EntityInterface $entity) {&#10;  if ($entity&#10;    -&gt;isTranslatable()) {&#10;    $route_match = \Drupal::routeMatch();&#10;    \Drupal::service('content_translation.synchronizer')&#10;      -&gt;synchronizeFields($entity, $entity&#10;      -&gt;language()&#10;      -&gt;getId(), $route_match&#10;      -&gt;getParameter('source_langcode'));&#10;  }&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_presave()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_revision_create" value="/**&#10; * Implements hook_ENTITY_TYPE_revision_create().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_revision_create(Drupal\Core\Entity\EntityInterface $new_revision, Drupal\Core\Entity\EntityInterface $entity, $keep_untranslatable_fields) {&#10;&#10;  // Retain the value from an untranslatable field, which are by default&#10;  // synchronized from the default revision.&#10;  $new_revision&#10;    -&gt;set('untranslatable_field', $entity&#10;    -&gt;get('untranslatable_field'));&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_revision_create()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_revision_delete" value="/**&#10; * Implements hook_ENTITY_TYPE_revision_delete().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_revision_delete(Drupal\Core\Entity\EntityInterface $entity) {&#10;  $referenced_files_by_field = _editor_get_file_uuids_by_field($entity);&#10;  foreach ($referenced_files_by_field as $field =&gt; $uuids) {&#10;    _editor_delete_file_usage($uuids, $entity, 1);&#10;  }&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_revision_delete()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_storage_load" value="/**&#10; * Implements hook_ENTITY_TYPE_storage_load().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_storage_load(array $entities) {&#10;  foreach ($entities as $entity) {&#10;    $entity-&gt;foo = mymodule_add_something_uncached($entity);&#10;  }&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_storage_load()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_translation_create" value="/**&#10; * Implements hook_ENTITY_TYPE_translation_create().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_translation_create(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  \Drupal::logger('example')&#10;    -&gt;info('ENTITY_TYPE translation created: @label', [&#10;    '@label' =&gt; $translation&#10;      -&gt;label(),&#10;  ]);&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_translation_create()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_translation_delete" value="/**&#10; * Implements hook_ENTITY_TYPE_translation_delete().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_translation_delete(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  $variables = [&#10;    '@language' =&gt; $translation&#10;      -&gt;language()&#10;      -&gt;getName(),&#10;    '@label' =&gt; $translation&#10;      -&gt;label(),&#10;  ];&#10;  \Drupal::logger('example')&#10;    -&gt;notice('The @language translation of @label has just been deleted.', $variables);&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_translation_delete()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_translation_insert" value="/**&#10; * Implements hook_ENTITY_TYPE_translation_insert().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_translation_insert(\Drupal\Core\Entity\EntityInterface $translation) {&#10;  $variables = [&#10;    '@language' =&gt; $translation&#10;      -&gt;language()&#10;      -&gt;getName(),&#10;    '@label' =&gt; $translation&#10;      -&gt;getUntranslated()&#10;      -&gt;label(),&#10;  ];&#10;  \Drupal::logger('example')&#10;    -&gt;notice('The @language translation of @label has just been stored.', $variables);&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_translation_insert()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_update" value="/**&#10; * Implements hook_ENTITY_TYPE_update().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_update(Drupal\Core\Entity\EntityInterface $entity) {&#10;&#10;  // Update the entity's entry in a fictional table of this type of entity.&#10;  \Drupal::database()&#10;    -&gt;update('example_entity')&#10;    -&gt;fields([&#10;    'updated' =&gt; REQUEST_TIME,&#10;  ])&#10;    -&gt;condition('id', $entity&#10;    -&gt;id())&#10;    -&gt;execute();&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_update()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_view" value="/**&#10; * Implements hook_ENTITY_TYPE_view().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_view(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {&#10;&#10;  // Only do the extra work if the component is configured to be displayed.&#10;  // This assumes a 'mymodule_addition' extra field has been defined for the&#10;  // entity bundle in hook_entity_extra_field_info().&#10;  if ($display&#10;    -&gt;getComponent('mymodule_addition')) {&#10;    $build['mymodule_addition'] = [&#10;      '#markup' =&gt; mymodule_addition($entity),&#10;      '#theme' =&gt; 'mymodule_my_additional_field',&#10;    ];&#10;  }&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_view()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ENTITY_TYPE_view_alter" value="/**&#10; * Implements hook_ENTITY_TYPE_view_alter().&#10; */&#10;function $MODULE$_$ENTITY_TYPE$_view_alter(array &amp;$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {&#10;  if ($build['#view_mode'] == 'full' &amp;&amp; isset($build['an_additional_field'])) {&#10;&#10;    // Change its weight.&#10;    $build['an_additional_field']['#weight'] = -10;&#10;&#10;    // Add a #post_render callback to act on the rendered HTML of the entity.&#10;    $build['#post_render'][] = 'my_module_node_post_render';&#10;  }&#10;}" shortcut="SPACE" description="hook_ENTITY_TYPE_view_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_update" value="/**&#10; * Implements hook_entity_update().&#10; */&#10;function $MODULE$_entity_update(Drupal\Core\Entity\EntityInterface $entity) {&#10;&#10;  // Update the entity's entry in a fictional table of all entities.&#10;  \Drupal::database()&#10;    -&gt;update('example_entity')&#10;    -&gt;fields([&#10;    'updated' =&gt; REQUEST_TIME,&#10;  ])&#10;    -&gt;condition('type', $entity&#10;    -&gt;getEntityTypeId())&#10;    -&gt;condition('id', $entity&#10;    -&gt;id())&#10;    -&gt;execute();&#10;}" shortcut="SPACE" description="hook_entity_update()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_view" value="/**&#10; * Implements hook_entity_view().&#10; */&#10;function $MODULE$_entity_view(array &amp;$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {&#10;&#10;  // Only do the extra work if the component is configured to be displayed.&#10;  // This assumes a 'mymodule_addition' extra field has been defined for the&#10;  // entity bundle in hook_entity_extra_field_info().&#10;  if ($display&#10;    -&gt;getComponent('mymodule_addition')) {&#10;    $build['mymodule_addition'] = [&#10;      '#markup' =&gt; mymodule_addition($entity),&#10;      '#theme' =&gt; 'mymodule_my_additional_field',&#10;    ];&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_view()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_view_alter" value="/**&#10; * Implements hook_entity_view_alter().&#10; */&#10;function $MODULE$_entity_view_alter(array &amp;$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {&#10;  if ($build['#view_mode'] == 'full' &amp;&amp; isset($build['an_additional_field'])) {&#10;&#10;    // Change its weight.&#10;    $build['an_additional_field']['#weight'] = -10;&#10;&#10;    // Add a #post_render callback to act on the rendered HTML of the entity.&#10;    // The object must implement \Drupal\Core\Security\TrustedCallbackInterface.&#10;    $build['#post_render'][] = '\\Drupal\\my_module\\NodeCallback::postRender';&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_view_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_view_display_alter" value="/**&#10; * Implements hook_entity_view_display_alter().&#10; */&#10;function $MODULE$_entity_view_display_alter(\Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, array $context) {&#10;&#10;  // Leave field labels out of the search index.&#10;  if ($context['entity_type'] == 'node' &amp;&amp; $context['view_mode'] == 'search_index') {&#10;    foreach ($display&#10;      -&gt;getComponents() as $name =&gt; $options) {&#10;      if (isset($options['label'])) {&#10;        $options['label'] = 'hidden';&#10;        $display&#10;          -&gt;setComponent($name, $options);&#10;      }&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_view_display_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_view_mode_alter" value="/**&#10; * Implements hook_entity_view_mode_alter().&#10; */&#10;function $MODULE$_entity_view_mode_alter(&amp;$view_mode, Drupal\Core\Entity\EntityInterface $entity, $context) {&#10;&#10;  // For nodes, change the view mode when it is teaser.&#10;  if ($entity&#10;    -&gt;getEntityTypeId() == 'node' &amp;&amp; $view_mode == 'teaser') {&#10;    $view_mode = 'my_custom_view_mode';&#10;  }&#10;}" shortcut="SPACE" description="hook_entity_view_mode_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_entity_view_mode_info_alter" value="/**&#10; * Implements hook_entity_view_mode_info_alter().&#10; */&#10;function $MODULE$_entity_view_mode_info_alter(&amp;$view_modes) {&#10;  $view_modes['user']['full']['status'] = TRUE;&#10;}" shortcut="SPACE" description="hook_entity_view_mode_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_extension" value="/**&#10; * Implements hook_extension().&#10; */&#10;function $MODULE$_extension() {&#10;&#10;  // Extension for template base names in Twig.&#10;  return '.html.twig';&#10;}" shortcut="SPACE" description="hook_extension()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_field_formatter_info_alter" value="/**&#10; * Implements hook_field_formatter_info_alter().&#10; */&#10;function $MODULE$_field_formatter_info_alter(array &amp;$info) {&#10;&#10;  // Let a new field type re-use an existing formatter.&#10;  $info['text_default']['field_types'][] = 'my_field_type';&#10;}" shortcut="SPACE" description="hook_field_formatter_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_field_info_alter" value="/**&#10; * Implements hook_field_info_alter().&#10; */&#10;function $MODULE$_field_info_alter(&amp;$info) {&#10;&#10;  // Change the default widget for fields of type 'foo'.&#10;  if (isset($info['foo'])) {&#10;    $info['foo']['default_widget'] = 'mymodule_widget';&#10;  }&#10;}" shortcut="SPACE" description="hook_field_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_field_info_max_weight" value="/**&#10; * Implements hook_field_info_max_weight().&#10; */&#10;function $MODULE$_field_info_max_weight($entity_type, $bundle, $context, $context_mode) {&#10;  $weights = [];&#10;  foreach (my_module_entity_additions($entity_type, $bundle, $context, $context_mode) as $addition) {&#10;    $weights[] = $addition['weight'];&#10;  }&#10;  return $weights ? max($weights) : NULL;&#10;}" shortcut="SPACE" description="hook_field_info_max_weight()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_field_purge_field" value="/**&#10; * Implements hook_field_purge_field().&#10; */&#10;function $MODULE$_field_purge_field(\Drupal\field\Entity\FieldConfig $field) {&#10;  \Drupal::database()&#10;    -&gt;delete('my_module_field_info')&#10;    -&gt;condition('id', $field&#10;    -&gt;id())&#10;    -&gt;execute();&#10;}" shortcut="SPACE" description="hook_field_purge_field()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_field_purge_field_storage" value="/**&#10; * Implements hook_field_purge_field_storage().&#10; */&#10;function $MODULE$_field_purge_field_storage(\Drupal\field\Entity\FieldStorageConfig $field_storage) {&#10;  \Drupal::database()&#10;    -&gt;delete('my_module_field_storage_info')&#10;    -&gt;condition('uuid', $field_storage&#10;    -&gt;uuid())&#10;    -&gt;execute();&#10;}" shortcut="SPACE" description="hook_field_purge_field_storage()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_field_storage_config_update_forbid" value="/**&#10; * Implements hook_field_storage_config_update_forbid().&#10; */&#10;function $MODULE$_field_storage_config_update_forbid(\Drupal\field\FieldStorageConfigInterface $field_storage, \Drupal\field\FieldStorageConfigInterface $prior_field_storage) {&#10;  if ($field_storage&#10;    -&gt;getTypeProvider() == 'options' &amp;&amp; $field_storage&#10;    -&gt;hasData()) {&#10;&#10;    // Forbid any update that removes allowed values with actual data.&#10;    $allowed_values = $field_storage&#10;      -&gt;getSetting('allowed_values');&#10;    $prior_allowed_values = $prior_field_storage&#10;      -&gt;getSetting('allowed_values');&#10;    $lost_keys = array_keys(array_diff_key($prior_allowed_values, $allowed_values));&#10;    if (_options_values_in_use($field_storage&#10;      -&gt;getTargetEntityTypeId(), $field_storage&#10;      -&gt;getName(), $lost_keys)) {&#10;      throw new \Drupal\Core\Entity\Exception\FieldStorageDefinitionUpdateForbiddenException(&quot;A list field '{$field_storage-&gt;getName()}' with existing data cannot have its keys changed.&quot;);&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_field_storage_config_update_forbid()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_field_ui_preconfigured_options_alter" value="/**&#10; * Implements hook_field_ui_preconfigured_options_alter().&#10; */&#10;function $MODULE$_field_ui_preconfigured_options_alter(array &amp;$options, $field_type) {&#10;&#10;  // If the field is not an &quot;entity_reference&quot;-based field, bail out.&#10;&#10;  /** @var \Drupal\Core\Field\FieldTypePluginManager $field_type_manager */&#10;  $field_type_manager = \Drupal::service('plugin.manager.field.field_type');&#10;  $class = $field_type_manager&#10;    -&gt;getPluginClass($field_type);&#10;  if (!is_a($class, 'Drupal\\Core\\Field\\Plugin\\Field\\FieldType\\EntityReferenceItem', TRUE)) {&#10;    return;&#10;  }&#10;&#10;  // Set the default formatter for media in entity reference fields to be the&#10;  // &quot;Rendered entity&quot; formatter.&#10;  if (!empty($options['media'])) {&#10;    $options['media']['entity_view_display']['type'] = 'entity_reference_entity_view';&#10;  }&#10;}" shortcut="SPACE" description="hook_field_ui_preconfigured_options_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_field_views_data" value="/**&#10; * Implements hook_field_views_data().&#10; */&#10;function $MODULE$_field_views_data(\Drupal\field\FieldStorageConfigInterface $field_storage) {&#10;  $data = views_field_default_views_data($field_storage);&#10;  foreach ($data as $table_name =&gt; $table_data) {&#10;&#10;    // Add the relationship only on the target_id field.&#10;    $data[$table_name][$field_storage&#10;      -&gt;getName() . '_target_id']['relationship'] = [&#10;      'id' =&gt; 'standard',&#10;      'base' =&gt; 'file_managed',&#10;      'base field' =&gt; 'target_id',&#10;      'label' =&gt; t('image from @field_name', [&#10;        '@field_name' =&gt; $field_storage&#10;          -&gt;getName(),&#10;      ]),&#10;    ];&#10;  }&#10;  return $data;&#10;}" shortcut="SPACE" description="hook_field_views_data()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_field_views_data_alter" value="/**&#10; * Implements hook_field_views_data_alter().&#10; */&#10;function $MODULE$_field_views_data_alter(array &amp;$data, \Drupal\field\FieldStorageConfigInterface $field_storage) {&#10;  $entity_type_id = $field_storage&#10;    -&gt;getTargetEntityTypeId();&#10;  $field_name = $field_storage&#10;    -&gt;getName();&#10;  $entity_type = \Drupal::entityTypeManager()&#10;    -&gt;getDefinition($entity_type_id);&#10;  $pseudo_field_name = 'reverse_' . $field_name . '_' . $entity_type_id;&#10;  $table_mapping = \Drupal::entityTypeManager()&#10;    -&gt;getStorage($entity_type_id)&#10;    -&gt;getTableMapping();&#10;  list($label) = views_entity_field_label($entity_type_id, $field_name);&#10;  $data['file_managed'][$pseudo_field_name]['relationship'] = [&#10;    'title' =&gt; t('@entity using @field', [&#10;      '@entity' =&gt; $entity_type&#10;        -&gt;getLabel(),&#10;      '@field' =&gt; $label,&#10;    ]),&#10;    'help' =&gt; t('Relate each @entity with a @field set to the image.', [&#10;      '@entity' =&gt; $entity_type&#10;        -&gt;getLabel(),&#10;      '@field' =&gt; $label,&#10;    ]),&#10;    'id' =&gt; 'entity_reverse',&#10;    'field_name' =&gt; $field_name,&#10;    'entity_type' =&gt; $entity_type_id,&#10;    'field table' =&gt; $table_mapping&#10;      -&gt;getDedicatedDataTableName($field_storage),&#10;    'field field' =&gt; $field_name . '_target_id',&#10;    'base' =&gt; $entity_type&#10;      -&gt;getBaseTable(),&#10;    'base field' =&gt; $entity_type&#10;      -&gt;getKey('id'),&#10;    'label' =&gt; $field_name,&#10;    'join_extra' =&gt; [&#10;      0 =&gt; [&#10;        'field' =&gt; 'deleted',&#10;        'value' =&gt; 0,&#10;        'numeric' =&gt; TRUE,&#10;      ],&#10;    ],&#10;  ];&#10;}" shortcut="SPACE" description="hook_field_views_data_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_field_views_data_views_data_alter" value="/**&#10; * Implements hook_field_views_data_views_data_alter().&#10; */&#10;function $MODULE$_field_views_data_views_data_alter(array &amp;$data, \Drupal\field\FieldStorageConfigInterface $field) {&#10;  $field_name = $field&#10;    -&gt;getName();&#10;  $data_key = 'field_data_' . $field_name;&#10;  $entity_type_id = $field-&gt;entity_type;&#10;  $entity_type = \Drupal::entityTypeManager()&#10;    -&gt;getDefinition($entity_type_id);&#10;  $pseudo_field_name = 'reverse_' . $field_name . '_' . $entity_type_id;&#10;  list($label) = views_entity_field_label($entity_type_id, $field_name);&#10;  $table_mapping = \Drupal::entityTypeManager()&#10;    -&gt;getStorage($entity_type_id)&#10;    -&gt;getTableMapping();&#10;&#10;  // Views data for this field is in $data[$data_key].&#10;  $data[$data_key][$pseudo_field_name]['relationship'] = [&#10;    'title' =&gt; t('@entity using @field', [&#10;      '@entity' =&gt; $entity_type&#10;        -&gt;getLabel(),&#10;      '@field' =&gt; $label,&#10;    ]),&#10;    'help' =&gt; t('Relate each @entity with a @field set to the term.', [&#10;      '@entity' =&gt; $entity_type&#10;        -&gt;getLabel(),&#10;      '@field' =&gt; $label,&#10;    ]),&#10;    'id' =&gt; 'entity_reverse',&#10;    'field_name' =&gt; $field_name,&#10;    'entity_type' =&gt; $entity_type_id,&#10;    'field table' =&gt; $table_mapping&#10;      -&gt;getDedicatedDataTableName($field),&#10;    'field field' =&gt; $field_name . '_target_id',&#10;    'base' =&gt; $entity_type&#10;      -&gt;getBaseTable(),&#10;    'base field' =&gt; $entity_type&#10;      -&gt;getKey('id'),&#10;    'label' =&gt; $field_name,&#10;    'join_extra' =&gt; [&#10;      0 =&gt; [&#10;        'field' =&gt; 'deleted',&#10;        'value' =&gt; 0,&#10;        'numeric' =&gt; TRUE,&#10;      ],&#10;    ],&#10;  ];&#10;}" shortcut="SPACE" description="hook_field_views_data_views_data_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_field_widget_form_alter" value="/**&#10; * Implements hook_field_widget_form_alter().&#10; */&#10;function $MODULE$_field_widget_form_alter(&amp;$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {&#10;&#10;  // Add a css class to widget form elements for all fields of type my_type.&#10;  $field_definition = $context['items']&#10;    -&gt;getFieldDefinition();&#10;  if ($field_definition&#10;    -&gt;getType() == 'my_type') {&#10;&#10;    // Be sure not to overwrite existing attributes.&#10;    $element['#attributes']['class'][] = 'my-class';&#10;  }&#10;}" shortcut="SPACE" description="hook_field_widget_form_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_field_widget_info_alter" value="/**&#10; * Implements hook_field_widget_info_alter().&#10; */&#10;function $MODULE$_field_widget_info_alter(array &amp;$info) {&#10;&#10;  // Let a new field type re-use an existing widget.&#10;  $info['options_select']['field_types'][] = 'my_field_type';&#10;}" shortcut="SPACE" description="hook_field_widget_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_field_widget_multivalue_form_alter" value="/**&#10; * Implements hook_field_widget_multivalue_form_alter().&#10; */&#10;function $MODULE$_field_widget_multivalue_form_alter(array &amp;$elements, \Drupal\Core\Form\FormStateInterface $form_state, array $context) {&#10;&#10;  // Add a css class to widget form elements for all fields of type my_type.&#10;  $field_definition = $context['items']&#10;    -&gt;getFieldDefinition();&#10;  if ($field_definition&#10;    -&gt;getType() == 'my_type') {&#10;&#10;    // Be sure not to overwrite existing attributes.&#10;    $elements['#attributes']['class'][] = 'my-class';&#10;  }&#10;}" shortcut="SPACE" description="hook_field_widget_multivalue_form_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_field_widget_multivalue_WIDGET_TYPE_form_alter" value="/**&#10; * Implements hook_field_widget_multivalue_WIDGET_TYPE_form_alter().&#10; */&#10;function $MODULE$_field_widget_multivalue_$WIDGET_TYPE$_form_alter(array &amp;$elements, \Drupal\Core\Form\FormStateInterface $form_state, array $context) {&#10;&#10;  // Code here will only act on widgets of type WIDGET_TYPE. For example,&#10;  // hook_field_widget_multivalue_mymodule_autocomplete_form_alter() will only&#10;  // act on widgets of type 'mymodule_autocomplete'.&#10;  // Change the autocomplete route for each autocomplete element within the&#10;  // multivalue widget.&#10;  foreach (Element::children($elements) as $delta =&gt; $element) {&#10;    $elements[$delta]['#autocomplete_route_name'] = 'mymodule.autocomplete_route';&#10;  }&#10;}" shortcut="SPACE" description="hook_field_widget_multivalue_WIDGET_TYPE_form_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="WIDGET_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_field_widget_WIDGET_TYPE_form_alter" value="/**&#10; * Implements hook_field_widget_WIDGET_TYPE_form_alter().&#10; */&#10;function $MODULE$_field_widget_$WIDGET_TYPE$_form_alter(&amp;$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {&#10;&#10;  // Code here will only act on widgets of type WIDGET_TYPE.  For example,&#10;  // hook_field_widget_mymodule_autocomplete_form_alter() will only act on&#10;  // widgets of type 'mymodule_autocomplete'.&#10;  $element['#autocomplete_route_name'] = 'mymodule.autocomplete_route';&#10;}" shortcut="SPACE" description="hook_field_widget_WIDGET_TYPE_form_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="WIDGET_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_filetransfer_info" value="/**&#10; * Implements hook_filetransfer_info().&#10; */&#10;function $MODULE$_filetransfer_info() {&#10;  $info['sftp'] = [&#10;    'title' =&gt; t('SFTP (Secure FTP)'),&#10;    'class' =&gt; 'Drupal\\Core\\FileTransfer\\SFTP',&#10;    'weight' =&gt; 10,&#10;  ];&#10;  return $info;&#10;}" shortcut="SPACE" description="hook_filetransfer_info()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_filetransfer_info_alter" value="/**&#10; * Implements hook_filetransfer_info_alter().&#10; */&#10;function $MODULE$_filetransfer_info_alter(&amp;$filetransfer_info) {&#10;&#10;  // Remove the FTP option entirely.&#10;  unset($filetransfer_info['ftp']);&#10;&#10;  // Make sure the SSH option is listed first.&#10;  $filetransfer_info['ssh']['weight'] = -10;&#10;}" shortcut="SPACE" description="hook_filetransfer_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_file_copy" value="/**&#10; * Implements hook_file_copy().&#10; */&#10;function $MODULE$_file_copy(Drupal\file\FileInterface $file, Drupal\file\FileInterface $source) {&#10;&#10;  // Make sure that the file name starts with the owner's user name.&#10;  if (strpos($file&#10;    -&gt;getFilename(), $file&#10;    -&gt;getOwner()-&gt;name) !== 0) {&#10;    $file&#10;      -&gt;setFilename($file&#10;      -&gt;getOwner()-&gt;name . '_' . $file&#10;      -&gt;getFilename());&#10;    $file&#10;      -&gt;save();&#10;    \Drupal::logger('file')&#10;      -&gt;notice('Copied file %source has been renamed to %destination', [&#10;      '%source' =&gt; $source-&gt;filename,&#10;      '%destination' =&gt; $file&#10;        -&gt;getFilename(),&#10;    ]);&#10;  }&#10;}" shortcut="SPACE" description="hook_file_copy()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_file_download" value="/**&#10; * Implements hook_file_download().&#10; */&#10;function $MODULE$_file_download($uri) {&#10;&#10;  // Check to see if this is a config download.&#10;  $scheme = StreamWrapperManager::getScheme($uri);&#10;  $target = StreamWrapperManager::getTarget($uri);&#10;  if ($scheme == 'temporary' &amp;&amp; $target == 'config.tar.gz') {&#10;    return [&#10;      'Content-disposition' =&gt; 'attachment; filename=&quot;config.tar.gz&quot;',&#10;    ];&#10;  }&#10;}" shortcut="SPACE" description="hook_file_download()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_file_mimetype_mapping_alter" value="/**&#10; * Implements hook_file_mimetype_mapping_alter().&#10; */&#10;function $MODULE$_file_mimetype_mapping_alter(&amp;$mapping) {&#10;&#10;  // Add new MIME type 'drupal/info'.&#10;  $mapping['mimetypes']['example_info'] = 'drupal/info';&#10;&#10;  // Add new extension '.info.yml' and map it to the 'drupal/info' MIME type.&#10;  $mapping['extensions']['info'] = 'example_info';&#10;&#10;  // Override existing extension mapping for '.ogg' files.&#10;  $mapping['extensions']['ogg'] = 189;&#10;}" shortcut="SPACE" description="hook_file_mimetype_mapping_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_file_move" value="/**&#10; * Implements hook_file_move().&#10; */&#10;function $MODULE$_file_move(Drupal\file\FileInterface $file, Drupal\file\FileInterface $source) {&#10;&#10;  // Make sure that the file name starts with the owner's user name.&#10;  if (strpos($file&#10;    -&gt;getFilename(), $file&#10;    -&gt;getOwner()-&gt;name) !== 0) {&#10;    $file&#10;      -&gt;setFilename($file&#10;      -&gt;getOwner()-&gt;name . '_' . $file&#10;      -&gt;getFilename());&#10;    $file&#10;      -&gt;save();&#10;    \Drupal::logger('file')&#10;      -&gt;notice('Moved file %source has been renamed to %destination', [&#10;      '%source' =&gt; $source-&gt;filename,&#10;      '%destination' =&gt; $file&#10;        -&gt;getFilename(),&#10;    ]);&#10;  }&#10;}" shortcut="SPACE" description="hook_file_move()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_file_url_alter" value="/**&#10; * Implements hook_file_url_alter().&#10; */&#10;function $MODULE$_file_url_alter(&amp;$uri) {&#10;  $user = \Drupal::currentUser();&#10;&#10;  // User 1 will always see the local file in this example.&#10;  if ($user&#10;    -&gt;id() == 1) {&#10;    return;&#10;  }&#10;  $cdn1 = 'http://cdn1.example.com';&#10;  $cdn2 = 'http://cdn2.example.com';&#10;  $cdn_extensions = [&#10;    'css',&#10;    'js',&#10;    'gif',&#10;    'jpg',&#10;    'jpeg',&#10;    'png',&#10;  ];&#10;&#10;  // Most CDNs don't support private file transfers without a lot of hassle,&#10;  // so don't support this in the common case.&#10;  $schemes = [&#10;    'public',&#10;  ];&#10;&#10;  /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager */&#10;  $stream_wrapper_manager = \Drupal::service('stream_wrapper_manager');&#10;  $scheme = $stream_wrapper_manager::getScheme($uri);&#10;&#10;  // Only serve shipped files and public created files from the CDN.&#10;  if (!$scheme || in_array($scheme, $schemes)) {&#10;&#10;    // Shipped files.&#10;    if (!$scheme) {&#10;      $path = $uri;&#10;    }&#10;    else {&#10;      $wrapper = $stream_wrapper_manager&#10;        -&gt;getViaScheme($scheme);&#10;      $path = $wrapper&#10;        -&gt;getDirectoryPath() . '/' . $stream_wrapper_manager::getTarget($uri);&#10;    }&#10;&#10;    // Clean up Windows paths.&#10;    $path = str_replace('\\', '/', $path);&#10;&#10;    // Serve files with one of the CDN extensions from CDN 1, all others from&#10;    // CDN 2.&#10;    $pathinfo = pathinfo($path);&#10;    if (isset($pathinfo['extension']) &amp;&amp; in_array($pathinfo['extension'], $cdn_extensions)) {&#10;      $uri = $cdn1 . '/' . $path;&#10;    }&#10;    else {&#10;      $uri = $cdn2 . '/' . $path;&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_file_url_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_file_validate" value="/**&#10; * Implements hook_file_validate().&#10; */&#10;function $MODULE$_file_validate(Drupal\file\FileInterface $file) {&#10;  $errors = [];&#10;  if (!$file&#10;    -&gt;getFilename()) {&#10;    $errors[] = t(&quot;The file's name is empty. Please give a name to the file.&quot;);&#10;  }&#10;  if (strlen($file&#10;    -&gt;getFilename()) &gt; 255) {&#10;    $errors[] = t(&quot;The file's name exceeds the 255 characters limit. Please rename the file and try again.&quot;);&#10;  }&#10;  return $errors;&#10;}" shortcut="SPACE" description="hook_file_validate()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_filter_format_disable" value="/**&#10; * Implements hook_filter_format_disable().&#10; */&#10;function $MODULE$_filter_format_disable($format) {&#10;  mymodule_cache_rebuild();&#10;}" shortcut="SPACE" description="hook_filter_format_disable()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_filter_info_alter" value="/**&#10; * Implements hook_filter_info_alter().&#10; */&#10;function $MODULE$_filter_info_alter(&amp;$info) {&#10;&#10;  // Alter the default settings of the URL filter provided by core.&#10;  $info['filter_url']['default_settings'] = [&#10;    'filter_url_length' =&gt; 100,&#10;  ];&#10;}" shortcut="SPACE" description="hook_filter_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_filter_secure_image_alter" value="/**&#10; * Implements hook_filter_secure_image_alter().&#10; */&#10;function $MODULE$_filter_secure_image_alter(&amp;$image) {&#10;&#10;  // Turn an invalid image into an error indicator.&#10;  $image&#10;    -&gt;setAttribute('src', base_path() . 'core/misc/icons/e32700/error.svg');&#10;  $image&#10;    -&gt;setAttribute('alt', t('Image removed.'));&#10;  $image&#10;    -&gt;setAttribute('title', t('This image has been removed. For security reasons, only images from the local domain are allowed.'));&#10;&#10;  // Add a CSS class to aid in styling.&#10;  $class = $image&#10;    -&gt;getAttribute('class') ? trim($image&#10;    -&gt;getAttribute('class')) . ' ' : '';&#10;  $class .= 'filter-image-invalid';&#10;  $image&#10;    -&gt;setAttribute('class', $class);&#10;}" shortcut="SPACE" description="hook_filter_secure_image_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_form_alter" value="/**&#10; * Implements hook_form_alter().&#10; */&#10;function $MODULE$_form_alter(&amp;$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {&#10;  if (isset($form['type']) &amp;&amp; $form['type']['#value'] . '_node_settings' == $form_id) {&#10;    $upload_enabled_types = \Drupal::config('mymodule.settings')&#10;      -&gt;get('upload_enabled_types');&#10;    $form['workflow']['upload_' . $form['type']['#value']] = [&#10;      '#type' =&gt; 'radios',&#10;      '#title' =&gt; t('Attachments'),&#10;      '#default_value' =&gt; in_array($form['type']['#value'], $upload_enabled_types) ? 1 : 0,&#10;      '#options' =&gt; [&#10;        t('Disabled'),&#10;        t('Enabled'),&#10;      ],&#10;    ];&#10;&#10;    // Add a custom submit handler to save the array of types back to the config file.&#10;    $form['actions']['submit']['#submit'][] = 'mymodule_upload_enabled_types_submit';&#10;  }&#10;}" shortcut="SPACE" description="hook_form_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_form_BASE_FORM_ID_alter" value="/**&#10; * Implements hook_form_BASE_FORM_ID_alter().&#10; */&#10;function $MODULE$_form_$BASE_FORM_ID$_alter(&amp;$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {&#10;&#10;  // Modification for the form with the given BASE_FORM_ID goes here. For&#10;  // example, if BASE_FORM_ID is &quot;node_form&quot;, this code would run on every&#10;  // node form, regardless of node type.&#10;  // Add a checkbox to the node form about agreeing to terms of use.&#10;  $form['terms_of_use'] = [&#10;    '#type' =&gt; 'checkbox',&#10;    '#title' =&gt; t(&quot;I agree with the website's terms and conditions.&quot;),&#10;    '#required' =&gt; TRUE,&#10;  ];&#10;}" shortcut="SPACE" description="hook_form_BASE_FORM_ID_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="BASE_FORM_ID" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_form_FORM_ID_alter" value="/**&#10; * Implements hook_form_FORM_ID_alter().&#10; */&#10;function $MODULE$_form_$FORM_ID$_alter(&amp;$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {&#10;&#10;  // Modification for the form with the given form ID goes here. For example, if&#10;  // FORM_ID is &quot;user_register_form&quot; this code would run only on the user&#10;  // registration form.&#10;  // Add a checkbox to registration form about agreeing to terms of use.&#10;  $form['terms_of_use'] = [&#10;    '#type' =&gt; 'checkbox',&#10;    '#title' =&gt; t(&quot;I agree with the website's terms and conditions.&quot;),&#10;    '#required' =&gt; TRUE,&#10;  ];&#10;}" shortcut="SPACE" description="hook_form_FORM_ID_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FORM_ID" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_form_system_theme_settings_alter" value="/**&#10; * Implements hook_form_system_theme_settings_alter().&#10; */&#10;function $MODULE$_form_system_theme_settings_alter(&amp;$form, \Drupal\Core\Form\FormStateInterface $form_state) {&#10;&#10;  // Add a checkbox to toggle the breadcrumb trail.&#10;  $form['toggle_breadcrumb'] = [&#10;    '#type' =&gt; 'checkbox',&#10;    '#title' =&gt; t('Display the breadcrumb'),&#10;    '#default_value' =&gt; theme_get_setting('features.breadcrumb'),&#10;    '#description' =&gt; t('Show a trail of links from the homepage to the current page.'),&#10;  ];&#10;}" shortcut="SPACE" description="hook_form_system_theme_settings_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_hal_relation_uri_alter" value="/**&#10; * Implements hook_hal_relation_uri_alter().&#10; */&#10;function $MODULE$_hal_relation_uri_alter(&amp;$uri, $context = []) {&#10;  if ($context['mymodule'] == TRUE) {&#10;    $base = \Drupal::config('hal.settings')&#10;      -&gt;get('link_domain');&#10;    $uri = str_replace($base, 'http://mymodule.domain', $uri);&#10;  }&#10;}" shortcut="SPACE" description="hook_hal_relation_uri_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_hal_type_uri_alter" value="/**&#10; * Implements hook_hal_type_uri_alter().&#10; */&#10;function $MODULE$_hal_type_uri_alter(&amp;$uri, $context = []) {&#10;  if ($context['mymodule'] == TRUE) {&#10;    $base = \Drupal::config('hal.settings')&#10;      -&gt;get('link_domain');&#10;    $uri = str_replace($base, 'http://mymodule.domain', $uri);&#10;  }&#10;}" shortcut="SPACE" description="hook_hal_type_uri_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_help" value="/**&#10; * Implements hook_help().&#10; */&#10;function $MODULE$_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {&#10;  switch ($route_name) {&#10;&#10;    // Main module help for the block module.&#10;    case 'help.page.block':&#10;      return '&lt;p&gt;' . t('Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Bartik, for example, implements the regions &quot;Sidebar first&quot;, &quot;Sidebar second&quot;, &quot;Featured&quot;, &quot;Content&quot;, &quot;Header&quot;, &quot;Footer&quot;, etc., and a block may appear in any one of these areas. The &lt;a href=&quot;:blocks&quot;&gt;blocks administration page&lt;/a&gt; provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.', [&#10;        ':blocks' =&gt; Url::fromRoute('block.admin_display')&#10;          -&gt;toString(),&#10;      ]) . '&lt;/p&gt;';&#10;&#10;    // Help for another path in the block module.&#10;    case 'block.admin_display':&#10;      return '&lt;p&gt;' . t('This page provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions. Since not all themes implement the same regions, or display regions in the same way, blocks are positioned on a per-theme basis. Remember that your changes will not be saved until you click the &lt;em&gt;Save blocks&lt;/em&gt; button at the bottom of the page.') . '&lt;/p&gt;';&#10;  }&#10;}" shortcut="SPACE" description="hook_help()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_help_section_info_alter" value="/**&#10; * Implements hook_help_section_info_alter().&#10; */&#10;function $MODULE$_help_section_info_alter(array &amp;$info) {&#10;&#10;  // Alter the header for the module overviews section.&#10;  $info['hook_help']['title'] = t('Overviews of modules');&#10;&#10;  // Move the module overviews section to the end.&#10;  $info['hook_help']['weight'] = 500;&#10;}" shortcut="SPACE" description="hook_help_section_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_help_topics_info_alter" value="/**&#10; * Implements hook_help_topics_info_alter().&#10; */&#10;function $MODULE$_help_topics_info_alter(array &amp;$info) {&#10;&#10;  // Alter the help topic to be displayed on admin/help.&#10;  $info['example.help_topic']['top_level'] = TRUE;&#10;}" shortcut="SPACE" description="hook_help_topics_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_hook_info" value="/**&#10; * Implements hook_hook_info().&#10; */&#10;function $MODULE$_hook_info() {&#10;  $hooks['token_info'] = [&#10;    'group' =&gt; 'tokens',&#10;  ];&#10;  $hooks['tokens'] = [&#10;    'group' =&gt; 'tokens',&#10;  ];&#10;  return $hooks;&#10;}" shortcut="SPACE" description="hook_hook_info()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_image_effect_info_alter" value="/**&#10; * Implements hook_image_effect_info_alter().&#10; */&#10;function $MODULE$_image_effect_info_alter(&amp;$effects) {&#10;&#10;  // Override the Image module's 'Scale and Crop' effect label.&#10;  $effects['image_scale_and_crop']['label'] = t('Bangers and Mash');&#10;}" shortcut="SPACE" description="hook_image_effect_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_image_style_flush" value="/**&#10; * Implements hook_image_style_flush().&#10; */&#10;function $MODULE$_image_style_flush($style) {&#10;&#10;  // Empty cached data that contains information about the style.&#10;  \Drupal::cache('mymodule')&#10;    -&gt;deleteAll();&#10;}" shortcut="SPACE" description="hook_image_style_flush()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_install" value="/**&#10; * Implements hook_install().&#10; */&#10;function $MODULE$_install($is_syncing) {&#10;&#10;  // Set general module variables.&#10;  \Drupal::state()&#10;    -&gt;set('mymodule.foo', 'bar');&#10;}" shortcut="SPACE" description="hook_install()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_install_tasks" value="/**&#10; * Implements hook_install_tasks().&#10; */&#10;function $MODULE$_install_tasks(&amp;$install_state) {&#10;&#10;  // Here, we define a variable to allow tasks to indicate that a particular,&#10;  // processor-intensive batch process needs to be triggered later on in the&#10;  // installation.&#10;  $my_profile_needs_batch_processing = \Drupal::state()&#10;    -&gt;get('my_profile.needs_batch_processing', FALSE);&#10;  $tasks = [&#10;    // This is an example of a task that defines a form which the user who is&#10;    // installing the site will be asked to fill out. To implement this task,&#10;    // your profile would define a function named my_profile_data_import_form()&#10;    // as a normal form API callback function, with associated validation and&#10;    // submit handlers. In the submit handler, in addition to saving whatever&#10;    // other data you have collected from the user, you might also call&#10;    // \Drupal::state()-&gt;set('my_profile.needs_batch_processing', TRUE) if the&#10;    // user has entered data which requires that batch processing will need to&#10;    // occur later on.&#10;    'my_profile_data_import_form' =&gt; [&#10;      'display_name' =&gt; t('Data import options'),&#10;      'type' =&gt; 'form',&#10;    ],&#10;    // Similarly, to implement this task, your profile would define a function&#10;    // named my_profile_settings_form() with associated validation and submit&#10;    // handlers. This form might be used to collect and save additional&#10;    // information from the user that your profile needs. There are no extra&#10;    // steps required for your profile to act as an &quot;installation wizard&quot;; you&#10;    // can simply define as many tasks of type 'form' as you wish to execute,&#10;    // and the forms will be presented to the user, one after another.&#10;    'my_profile_settings_form' =&gt; [&#10;      'display_name' =&gt; t('Additional options'),&#10;      'type' =&gt; 'form',&#10;    ],&#10;    // This is an example of a task that performs batch operations. To&#10;    // implement this task, your profile would define a function named&#10;    // my_profile_batch_processing() which returns a batch API array definition&#10;    // that the installer will use to execute your batch operations. Due to the&#10;    // 'my_profile.needs_batch_processing' variable used here, this task will be&#10;    // hidden and skipped unless your profile set it to TRUE in one of the&#10;    // previous tasks.&#10;    'my_profile_batch_processing' =&gt; [&#10;      'display_name' =&gt; t('Import additional data'),&#10;      'display' =&gt; $my_profile_needs_batch_processing,&#10;      'type' =&gt; 'batch',&#10;      'run' =&gt; $my_profile_needs_batch_processing ? INSTALL_TASK_RUN_IF_NOT_COMPLETED : INSTALL_TASK_SKIP,&#10;    ],&#10;    // This is an example of a task that will not be displayed in the list that&#10;    // the user sees. To implement this task, your profile would define a&#10;    // function named my_profile_final_site_setup(), in which additional,&#10;    // automated site setup operations would be performed. Since this is the&#10;    // last task defined by your profile, you should also use this function to&#10;    // call \Drupal::state()-&gt;delete('my_profile.needs_batch_processing') and&#10;    // clean up the state that was used above. If you want the user to pass&#10;    // to the final Drupal installation tasks uninterrupted, return no output&#10;    // from this function. Otherwise, return themed output that the user will&#10;    // see (for example, a confirmation page explaining that your profile's&#10;    // tasks are complete, with a link to reload the current page and therefore&#10;    // pass on to the final Drupal installation tasks when the user is ready to&#10;    // do so).&#10;    'my_profile_final_site_setup' =&gt; [],&#10;  ];&#10;  return $tasks;&#10;}" shortcut="SPACE" description="hook_install_tasks()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_install_tasks_alter" value="/**&#10; * Implements hook_install_tasks_alter().&#10; */&#10;function $MODULE$_install_tasks_alter(&amp;$tasks, $install_state) {&#10;&#10;  // Replace the entire site configuration form provided by Drupal core&#10;  // with a custom callback function defined by this installation profile.&#10;  $tasks['install_configure_form']['function'] = 'my_profile_install_configure_form';&#10;}" shortcut="SPACE" description="hook_install_tasks_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_jsonapi_entity_field_filter_access" value="/**&#10; * Implements hook_jsonapi_entity_field_filter_access().&#10; */&#10;function $MODULE$_jsonapi_entity_field_filter_access(\Drupal\Core\Field\FieldDefinitionInterface $field_definition, \Drupal\Core\Session\AccountInterface $account) {&#10;  if ($field_definition&#10;    -&gt;getTargetEntityTypeId() === 'node' &amp;&amp; $field_definition&#10;    -&gt;getName() === 'field_sensitive_data') {&#10;    $has_sufficient_access = FALSE;&#10;    foreach ([&#10;      'administer nodes',&#10;      'view all sensitive field data',&#10;    ] as $permission) {&#10;      $has_sufficient_access = $has_sufficient_access ?: $account&#10;        -&gt;hasPermission($permission);&#10;    }&#10;    return AccessResult::forbiddenIf(!$has_sufficient_access)&#10;      -&gt;cachePerPermissions();&#10;  }&#10;  return AccessResult::neutral();&#10;}" shortcut="SPACE" description="hook_jsonapi_entity_field_filter_access()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_jsonapi_entity_filter_access" value="/**&#10; * Implements hook_jsonapi_entity_filter_access().&#10; */&#10;function $MODULE$_jsonapi_entity_filter_access(\Drupal\Core\Entity\EntityTypeInterface $entity_type, \Drupal\Core\Session\AccountInterface $account) {&#10;&#10;  // For every entity type that has an admin permission, allow access to filter&#10;  // by all entities of that type to users with that permission.&#10;  if ($admin_permission = $entity_type&#10;    -&gt;getAdminPermission()) {&#10;    return [&#10;      JSONAPI_FILTER_AMONG_ALL =&gt; AccessResult::allowedIfHasPermission($account, $admin_permission),&#10;    ];&#10;  }&#10;}" shortcut="SPACE" description="hook_jsonapi_entity_filter_access()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_jsonapi_ENTITY_TYPE_filter_access" value="/**&#10; * Implements hook_jsonapi_ENTITY_TYPE_filter_access().&#10; */&#10;function $MODULE$_jsonapi_$ENTITY_TYPE$_filter_access(\Drupal\Core\Entity\EntityTypeInterface $entity_type, \Drupal\Core\Session\AccountInterface $account) {&#10;  return [&#10;    JSONAPI_FILTER_AMONG_ALL =&gt; AccessResult::allowedIfHasPermission($account, 'administer llamas'),&#10;    JSONAPI_FILTER_AMONG_PUBLISHED =&gt; AccessResult::allowedIfHasPermission($account, 'view all published llamas'),&#10;    JSONAPI_FILTER_AMONG_OWN =&gt; AccessResult::allowedIfHasPermissions($account, [&#10;      'view own published llamas',&#10;      'view own unpublished llamas',&#10;    ], 'AND'),&#10;  ];&#10;}" shortcut="SPACE" description="hook_jsonapi_ENTITY_TYPE_filter_access()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENTITY_TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_js_alter" value="/**&#10; * Implements hook_js_alter().&#10; */&#10;function $MODULE$_js_alter(&amp;$javascript, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {&#10;&#10;  // Swap out jQuery to use an updated version of the library.&#10;  $javascript['core/assets/vendor/jquery/jquery.min.js']['data'] = drupal_get_path('module', 'jquery_update') . '/jquery.js';&#10;}" shortcut="SPACE" description="hook_js_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_js_settings_alter" value="/**&#10; * Implements hook_js_settings_alter().&#10; */&#10;function $MODULE$_js_settings_alter(array &amp;$settings, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {&#10;&#10;  // Add settings.&#10;  $settings['user']['uid'] = \Drupal::currentUser();&#10;&#10;  // Manipulate settings.&#10;  if (isset($settings['dialog'])) {&#10;    $settings['dialog']['autoResize'] = FALSE;&#10;  }&#10;}" shortcut="SPACE" description="hook_js_settings_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_js_settings_build" value="/**&#10; * Implements hook_js_settings_build().&#10; */&#10;function $MODULE$_js_settings_build(array &amp;$settings, \Drupal\Core\Asset\AttachedAssetsInterface $assets) {&#10;&#10;  // Manipulate settings.&#10;  if (isset($settings['dialog'])) {&#10;    $settings['dialog']['autoResize'] = FALSE;&#10;  }&#10;}" shortcut="SPACE" description="hook_js_settings_build()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_language_fallback_candidates_alter" value="/**&#10; * Implements hook_language_fallback_candidates_alter().&#10; */&#10;function $MODULE$_language_fallback_candidates_alter(array &amp;$candidates, array $context) {&#10;  $candidates = array_reverse($candidates);&#10;}" shortcut="SPACE" description="hook_language_fallback_candidates_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_language_fallback_candidates_OPERATION_alter" value="/**&#10; * Implements hook_language_fallback_candidates_OPERATION_alter().&#10; */&#10;function $MODULE$_language_fallback_candidates_$OPERATION$_alter(array &amp;$candidates, array $context) {&#10;&#10;  // We know that the current OPERATION deals with entities so no need to check&#10;  // here.&#10;  if ($context['data']&#10;    -&gt;getEntityTypeId() == 'node') {&#10;    $candidates = array_reverse($candidates);&#10;  }&#10;}" shortcut="SPACE" description="hook_language_fallback_candidates_OPERATION_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="OPERATION" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_language_negotiation_info_alter" value="/**&#10; * Implements hook_language_negotiation_info_alter().&#10; */&#10;function $MODULE$_language_negotiation_info_alter(array &amp;$negotiation_info) {&#10;  if (isset($negotiation_info['custom_language_method'])) {&#10;    $negotiation_info['custom_language_method']['config'] = 'admin/config/regional/language/detection/custom-language-method';&#10;  }&#10;}" shortcut="SPACE" description="hook_language_negotiation_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_language_switch_links_alter" value="/**&#10; * Implements hook_language_switch_links_alter().&#10; */&#10;function $MODULE$_language_switch_links_alter(array &amp;$links, $type, \Drupal\Core\Url $url) {&#10;  $language_interface = \Drupal::languageManager()&#10;    -&gt;getCurrentLanguage();&#10;  if ($type == LanguageInterface::TYPE_CONTENT &amp;&amp; isset($links[$language_interface&#10;    -&gt;getId()])) {&#10;    foreach ($links[$language_interface&#10;      -&gt;getId()] as $link) {&#10;      $link['attributes']['class'][] = 'active-language';&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_language_switch_links_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_language_types_info" value="/**&#10; * Implements hook_language_types_info().&#10; */&#10;function $MODULE$_language_types_info() {&#10;  return [&#10;    'custom_language_type' =&gt; [&#10;      'name' =&gt; t('Custom language'),&#10;      'description' =&gt; t('A custom language type.'),&#10;      'locked' =&gt; FALSE,&#10;    ],&#10;    'fixed_custom_language_type' =&gt; [&#10;      'locked' =&gt; TRUE,&#10;      'fixed' =&gt; [&#10;        'custom_language_negotiation_method',&#10;      ],&#10;    ],&#10;  ];&#10;}" shortcut="SPACE" description="hook_language_types_info()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_language_types_info_alter" value="/**&#10; * Implements hook_language_types_info_alter().&#10; */&#10;function $MODULE$_language_types_info_alter(array &amp;$language_types) {&#10;  if (isset($language_types['custom_language_type'])) {&#10;    $language_types['custom_language_type_custom']['description'] = t('A far better description.');&#10;  }&#10;}" shortcut="SPACE" description="hook_language_types_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_layout_alter" value="/**&#10; * Implements hook_layout_alter().&#10; */&#10;function $MODULE$_layout_alter(&amp;$definitions) {&#10;&#10;  // Remove a layout.&#10;  unset($definitions['twocol']);&#10;}" shortcut="SPACE" description="hook_layout_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_library_info_alter" value="/**&#10; * Implements hook_library_info_alter().&#10; */&#10;function $MODULE$_library_info_alter(&amp;$libraries, $extension) {&#10;&#10;  // Update Farbtastic to version 2.0.&#10;  if ($extension == 'core' &amp;&amp; isset($libraries['jquery.farbtastic'])) {&#10;&#10;    // Verify existing version is older than the one we are updating to.&#10;    if (version_compare($libraries['jquery.farbtastic']['version'], '2.0', '&lt;')) {&#10;&#10;      // Update the existing Farbtastic to version 2.0.&#10;      $libraries['jquery.farbtastic']['version'] = '2.0';&#10;&#10;      // To accurately replace library files, the order of files and the options&#10;      // of each file have to be retained; e.g., like this:&#10;      $old_path = 'assets/vendor/farbtastic';&#10;&#10;      // Since the replaced library files are no longer located in a directory&#10;      // relative to the original extension, specify an absolute path (relative&#10;      // to DRUPAL_ROOT / base_path()) to the new location.&#10;      $new_path = '/' . drupal_get_path('module', 'farbtastic_update') . '/js';&#10;      $new_js = [];&#10;      $replacements = [&#10;        $old_path . '/farbtastic.js' =&gt; $new_path . '/farbtastic-2.0.js',&#10;      ];&#10;      foreach ($libraries['jquery.farbtastic']['js'] as $source =&gt; $options) {&#10;        if (isset($replacements[$source])) {&#10;          $new_js[$replacements[$source]] = $options;&#10;        }&#10;        else {&#10;          $new_js[$source] = $options;&#10;        }&#10;      }&#10;      $libraries['jquery.farbtastic']['js'] = $new_js;&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_library_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_library_info_build" value="/**&#10; * Implements hook_library_info_build().&#10; */&#10;function $MODULE$_library_info_build() {&#10;  $libraries = [];&#10;&#10;  // Add a library whose information changes depending on certain conditions.&#10;  $libraries['mymodule.zombie'] = [&#10;    'dependencies' =&gt; [&#10;      'core/backbone',&#10;    ],&#10;  ];&#10;  if (Drupal::moduleHandler()&#10;    -&gt;moduleExists('minifyzombies')) {&#10;    $libraries['mymodule.zombie'] += [&#10;      'js' =&gt; [&#10;        'mymodule.zombie.min.js' =&gt; [],&#10;      ],&#10;      'css' =&gt; [&#10;        'base' =&gt; [&#10;          'mymodule.zombie.min.css' =&gt; [],&#10;        ],&#10;      ],&#10;    ];&#10;  }&#10;  else {&#10;    $libraries['mymodule.zombie'] += [&#10;      'js' =&gt; [&#10;        'mymodule.zombie.js' =&gt; [],&#10;      ],&#10;      'css' =&gt; [&#10;        'base' =&gt; [&#10;          'mymodule.zombie.css' =&gt; [],&#10;        ],&#10;      ],&#10;    ];&#10;  }&#10;&#10;  // Add a library only if a certain condition is met. If code wants to&#10;  // integrate with this library it is safe to (try to) load it unconditionally&#10;  // without reproducing this check. If the library definition does not exist&#10;  // the library (of course) not be loaded but no notices or errors will be&#10;  // triggered.&#10;  if (Drupal::moduleHandler()&#10;    -&gt;moduleExists('vampirize')) {&#10;    $libraries['mymodule.vampire'] = [&#10;      'js' =&gt; [&#10;        'js/vampire.js' =&gt; [],&#10;      ],&#10;      'css' =&gt; [&#10;        'base' =&gt; [&#10;          'css/vampire.css',&#10;        ],&#10;      ],&#10;      'dependencies' =&gt; [&#10;        'core/jquery',&#10;      ],&#10;    ];&#10;  }&#10;  return $libraries;&#10;}" shortcut="SPACE" description="hook_library_info_build()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_link_alter" value="/**&#10; * Implements hook_link_alter().&#10; */&#10;function $MODULE$_link_alter(&amp;$variables) {&#10;&#10;  // Add a warning to the end of route links to the admin section.&#10;&#10;  /** @var \Drupal\Core\Url $url */&#10;  $url = $variables['url'];&#10;  if ($url&#10;    -&gt;isRouted() &amp;&amp; strpos($url&#10;    -&gt;getRouteName(), 'admin') !== FALSE) {&#10;    $variables['text'] = t('@text (Warning!)', [&#10;      '@text' =&gt; $variables['text'],&#10;    ]);&#10;  }&#10;}" shortcut="SPACE" description="hook_link_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_locale_translation_projects_alter" value="/**&#10; * Implements hook_locale_translation_projects_alter().&#10; */&#10;function $MODULE$_locale_translation_projects_alter(&amp;$projects) {&#10;&#10;  // The translations are located at a custom translation sever.&#10;  $projects['existing_project'] = [&#10;    'info' =&gt; [&#10;      'interface translation server pattern' =&gt; 'http://example.com/files/translations/%core/%project/%project-%version.%language.po',&#10;    ],&#10;  ];&#10;}" shortcut="SPACE" description="hook_locale_translation_projects_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_local_tasks_alter" value="/**&#10; * Implements hook_local_tasks_alter().&#10; */&#10;function $MODULE$_local_tasks_alter(&amp;$local_tasks) {&#10;&#10;  // Remove a specified local task plugin.&#10;  unset($local_tasks['example_plugin_id']);&#10;}" shortcut="SPACE" description="hook_local_tasks_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_mail" value="/**&#10; * Implements hook_mail().&#10; */&#10;function $MODULE$_mail($key, &amp;$message, $params) {&#10;  $account = $params['account'];&#10;  $context = $params['context'];&#10;  $variables = [&#10;    '%site_name' =&gt; \Drupal::config('system.site')&#10;      -&gt;get('name'),&#10;    '%username' =&gt; $account&#10;      -&gt;getDisplayName(),&#10;  ];&#10;  if ($context['hook'] == 'taxonomy') {&#10;    $entity = $params['entity'];&#10;    $vocabulary = Vocabulary::load($entity&#10;      -&gt;id());&#10;    $variables += [&#10;      '%term_name' =&gt; $entity-&gt;name,&#10;      '%term_description' =&gt; $entity-&gt;description,&#10;      '%term_id' =&gt; $entity&#10;        -&gt;id(),&#10;      '%vocabulary_name' =&gt; $vocabulary&#10;        -&gt;label(),&#10;      '%vocabulary_description' =&gt; $vocabulary&#10;        -&gt;getDescription(),&#10;      '%vocabulary_id' =&gt; $vocabulary&#10;        -&gt;id(),&#10;    ];&#10;  }&#10;&#10;  // Node-based variable translation is only available if we have a node.&#10;  if (isset($params['node'])) {&#10;&#10;    /** @var \Drupal\node\NodeInterface $node */&#10;    $node = $params['node'];&#10;    $variables += [&#10;      '%uid' =&gt; $node&#10;        -&gt;getOwnerId(),&#10;      '%url' =&gt; $node&#10;        -&gt;toUrl('canonical', [&#10;        'absolute' =&gt; TRUE,&#10;      ])&#10;        -&gt;toString(),&#10;      '%node_type' =&gt; node_get_type_label($node),&#10;      '%title' =&gt; $node&#10;        -&gt;getTitle(),&#10;      '%teaser' =&gt; $node-&gt;teaser,&#10;      '%body' =&gt; $node-&gt;body,&#10;    ];&#10;  }&#10;  $subject = strtr($context['subject'], $variables);&#10;  $body = strtr($context['message'], $variables);&#10;  $message['subject'] .= str_replace([&#10;    &quot;\r&quot;,&#10;    &quot;\n&quot;,&#10;  ], '', $subject);&#10;  $message['body'][] = MailFormatHelper::htmlToText($body);&#10;}" shortcut="SPACE" description="hook_mail()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_mail_alter" value="/**&#10; * Implements hook_mail_alter().&#10; */&#10;function $MODULE$_mail_alter(&amp;$message) {&#10;  if ($message['id'] == 'modulename_messagekey') {&#10;    if (!example_notifications_optin($message['to'], $message['id'])) {&#10;&#10;      // If the recipient has opted to not receive such messages, cancel&#10;      // sending.&#10;      $message['send'] = FALSE;&#10;      return;&#10;    }&#10;    $message['body'][] = &quot;--\nMail sent out from &quot; . \Drupal::config('system.site')&#10;      -&gt;get('name');&#10;  }&#10;}" shortcut="SPACE" description="hook_mail_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_mail_backend_info_alter" value="/**&#10; * Implements hook_mail_backend_info_alter().&#10; */&#10;function $MODULE$_mail_backend_info_alter(&amp;$info) {&#10;  unset($info['test_mail_collector']);&#10;}" shortcut="SPACE" description="hook_mail_backend_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_media_source_info_alter" value="/**&#10; * Implements hook_media_source_info_alter().&#10; */&#10;function $MODULE$_media_source_info_alter(array &amp;$sources) {&#10;  $sources['youtube']['label'] = t('Youtube rocks!');&#10;}" shortcut="SPACE" description="hook_media_source_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_menu_links_discovered_alter" value="/**&#10; * Implements hook_menu_links_discovered_alter().&#10; */&#10;function $MODULE$_menu_links_discovered_alter(&amp;$links) {&#10;&#10;  // Change the weight and title of the user.logout link.&#10;  $links['user.logout']['weight'] = -10;&#10;  $links['user.logout']['title'] = new \Drupal\Core\StringTranslation\TranslatableMarkup('Logout');&#10;&#10;  // Conditionally add an additional link with a title that's not translated.&#10;  if (\Drupal::moduleHandler()&#10;    -&gt;moduleExists('search')) {&#10;    $links['menu.api.search'] = [&#10;      'title' =&gt; \Drupal::config('system.site')&#10;        -&gt;get('name'),&#10;      'route_name' =&gt; 'menu.api.search',&#10;      'description' =&gt; new \Drupal\Core\StringTranslation\TranslatableMarkup('View popular search phrases for this site.'),&#10;      'parent' =&gt; 'system.admin_reports',&#10;    ];&#10;  }&#10;}" shortcut="SPACE" description="hook_menu_links_discovered_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_menu_local_actions_alter" value="/**&#10; * Implements hook_menu_local_actions_alter().&#10; */&#10;function $MODULE$_menu_local_actions_alter(&amp;$local_actions) {&#10;}" shortcut="SPACE" description="hook_menu_local_actions_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_menu_local_tasks_alter" value="/**&#10; * Implements hook_menu_local_tasks_alter().&#10; */&#10;function $MODULE$_menu_local_tasks_alter(&amp;$data, $route_name, \Drupal\Core\Cache\RefinableCacheableDependencyInterface &amp;$cacheability) {&#10;&#10;  // Add a tab linking to node/add to all pages.&#10;  $data['tabs'][0]['node.add_page'] = [&#10;    '#theme' =&gt; 'menu_local_task',&#10;    '#link' =&gt; [&#10;      'title' =&gt; t('Example tab'),&#10;      'url' =&gt; Url::fromRoute('node.add_page'),&#10;      'localized_options' =&gt; [&#10;        'attributes' =&gt; [&#10;          'title' =&gt; t('Add content'),&#10;        ],&#10;      ],&#10;    ],&#10;  ];&#10;&#10;  // The tab we're adding is dependent on a user's access to add content.&#10;  $cacheability&#10;    -&gt;addCacheContexts([&#10;    'user.permissions',&#10;  ]);&#10;}" shortcut="SPACE" description="hook_menu_local_tasks_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_migrate_MIGRATION_ID_prepare_row" value="/**&#10; * Implements hook_migrate_MIGRATION_ID_prepare_row().&#10; */&#10;function $MODULE$_migrate_$MIGRATION_ID$_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {&#10;  $value = $source&#10;    -&gt;getDatabase()&#10;    -&gt;query('SELECT value FROM {variable} WHERE name = :name', [&#10;    ':name' =&gt; 'mymodule_filter_foo_' . $row&#10;      -&gt;getSourceProperty('format'),&#10;  ])&#10;    -&gt;fetchField();&#10;  if ($value) {&#10;    $row&#10;      -&gt;setSourceProperty('settings:mymodule:foo', unserialize($value));&#10;  }&#10;}" shortcut="SPACE" description="hook_migrate_MIGRATION_ID_prepare_row()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MIGRATION_ID" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_migrate_prepare_row" value="/**&#10; * Implements hook_migrate_prepare_row().&#10; */&#10;function $MODULE$_migrate_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {&#10;  if ($migration&#10;    -&gt;id() == 'd6_filter_formats') {&#10;    $value = $source&#10;      -&gt;getDatabase()&#10;      -&gt;query('SELECT value FROM {variable} WHERE name = :name', [&#10;      ':name' =&gt; 'mymodule_filter_foo_' . $row&#10;        -&gt;getSourceProperty('format'),&#10;    ])&#10;      -&gt;fetchField();&#10;    if ($value) {&#10;      $row&#10;        -&gt;setSourceProperty('settings:mymodule:foo', unserialize($value));&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_migrate_prepare_row()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_migration_plugins_alter" value="/**&#10; * Implements hook_migration_plugins_alter().&#10; */&#10;function $MODULE$_migration_plugins_alter(array &amp;$migrations) {&#10;  $migrations = array_filter($migrations, function (array $migration) {&#10;    $tags = isset($migration['migration_tags']) ? (array) $migration['migration_tags'] : [];&#10;    return !in_array('Drupal 6', $tags);&#10;  });&#10;}" shortcut="SPACE" description="hook_migration_plugins_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_modules_installed" value="/**&#10; * Implements hook_modules_installed().&#10; */&#10;function $MODULE$_modules_installed($modules, $is_syncing) {&#10;  if (in_array('lousy_module', $modules)) {&#10;    \Drupal::state()&#10;      -&gt;set('mymodule.lousy_module_compatibility', TRUE);&#10;  }&#10;  if (!$is_syncing) {&#10;    \Drupal::service('mymodule.service')&#10;      -&gt;doSomething($modules);&#10;  }&#10;}" shortcut="SPACE" description="hook_modules_installed()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_modules_uninstalled" value="/**&#10; * Implements hook_modules_uninstalled().&#10; */&#10;function $MODULE$_modules_uninstalled($modules, $is_syncing) {&#10;  if (in_array('lousy_module', $modules)) {&#10;    \Drupal::state()&#10;      -&gt;delete('mymodule.lousy_module_compatibility');&#10;  }&#10;  mymodule_cache_rebuild();&#10;  if (!$is_syncing) {&#10;    \Drupal::service('mymodule.service')&#10;      -&gt;doSomething($modules);&#10;  }&#10;}" shortcut="SPACE" description="hook_modules_uninstalled()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_module_implements_alter" value="/**&#10; * Implements hook_module_implements_alter().&#10; */&#10;function $MODULE$_module_implements_alter(&amp;$implementations, $hook) {&#10;  if ($hook == 'form_alter') {&#10;&#10;    // Move my_module_form_alter() to the end of the list.&#10;    // \Drupal::moduleHandler()-&gt;getImplementations()&#10;    // iterates through $implementations with a foreach loop which PHP iterates&#10;    // in the order that the items were added, so to move an item to the end of&#10;    // the array, we remove it and then add it.&#10;    $group = $implementations['my_module'];&#10;    unset($implementations['my_module']);&#10;    $implementations['my_module'] = $group;&#10;  }&#10;}" shortcut="SPACE" description="hook_module_implements_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_module_preinstall" value="/**&#10; * Implements hook_module_preinstall().&#10; */&#10;function $MODULE$_module_preinstall($module) {&#10;  mymodule_cache_clear();&#10;}" shortcut="SPACE" description="hook_module_preinstall()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_module_preuninstall" value="/**&#10; * Implements hook_module_preuninstall().&#10; */&#10;function $MODULE$_module_preuninstall($module) {&#10;  mymodule_cache_clear();&#10;}" shortcut="SPACE" description="hook_module_preuninstall()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_node_access_records" value="/**&#10; * Implements hook_node_access_records().&#10; */&#10;function $MODULE$_node_access_records(\Drupal\node\NodeInterface $node) {&#10;&#10;  // We only care about the node if it has been marked private. If not, it is&#10;  // treated just like any other node and we completely ignore it.&#10;  if ($node-&gt;private-&gt;value) {&#10;    $grants = [];&#10;&#10;    // Only published Catalan translations of private nodes should be viewable&#10;    // to all users. If we fail to check $node-&gt;isPublished(), all users would be able&#10;    // to view an unpublished node.&#10;    if ($node&#10;      -&gt;isPublished()) {&#10;      $grants[] = [&#10;        'realm' =&gt; 'example',&#10;        'gid' =&gt; 1,&#10;        'grant_view' =&gt; 1,&#10;        'grant_update' =&gt; 0,&#10;        'grant_delete' =&gt; 0,&#10;        'langcode' =&gt; 'ca',&#10;      ];&#10;    }&#10;&#10;    // For the example_author array, the GID is equivalent to a UID, which&#10;    // means there are many groups of just 1 user.&#10;    // Note that an author can always view nodes they own, even if they have&#10;    // status unpublished.&#10;    if ($node&#10;      -&gt;getOwnerId()) {&#10;      $grants[] = [&#10;        'realm' =&gt; 'example_author',&#10;        'gid' =&gt; $node&#10;          -&gt;getOwnerId(),&#10;        'grant_view' =&gt; 1,&#10;        'grant_update' =&gt; 1,&#10;        'grant_delete' =&gt; 1,&#10;        'langcode' =&gt; 'ca',&#10;      ];&#10;    }&#10;    return $grants;&#10;  }&#10;}" shortcut="SPACE" description="hook_node_access_records()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_node_access_records_alter" value="/**&#10; * Implements hook_node_access_records_alter().&#10; */&#10;function $MODULE$_node_access_records_alter(&amp;$grants, Drupal\node\NodeInterface $node) {&#10;&#10;  // Our module allows editors to mark specific articles with the 'is_preview'&#10;  // field. If the node being saved has a TRUE value for that field, then only&#10;  // our grants are retained, and other grants are removed. Doing so ensures&#10;  // that our rules are enforced no matter what priority other grants are given.&#10;  if ($node-&gt;is_preview) {&#10;&#10;    // Our module grants are set in $grants['example'].&#10;    $temp = $grants['example'];&#10;&#10;    // Now remove all module grants but our own.&#10;    $grants = [&#10;      'example' =&gt; $temp,&#10;    ];&#10;  }&#10;}" shortcut="SPACE" description="hook_node_access_records_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_node_grants" value="/**&#10; * Implements hook_node_grants().&#10; */&#10;function $MODULE$_node_grants(\Drupal\Core\Session\AccountInterface $account, $op) {&#10;  if ($account&#10;    -&gt;hasPermission('access private content')) {&#10;    $grants['example'] = [&#10;      1,&#10;    ];&#10;  }&#10;  if ($account&#10;    -&gt;id()) {&#10;    $grants['example_author'] = [&#10;      $account&#10;        -&gt;id(),&#10;    ];&#10;  }&#10;  return $grants;&#10;}" shortcut="SPACE" description="hook_node_grants()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_node_grants_alter" value="/**&#10; * Implements hook_node_grants_alter().&#10; */&#10;function $MODULE$_node_grants_alter(&amp;$grants, \Drupal\Core\Session\AccountInterface $account, $op) {&#10;&#10;  // Our sample module never allows certain roles to edit or delete&#10;  // content. Since some other node access modules might allow this&#10;  // permission, we expressly remove it by returning an empty $grants&#10;  // array for roles specified in our variable setting.&#10;  // Get our list of banned roles.&#10;  $restricted = \Drupal::config('example.settings')&#10;    -&gt;get('restricted_roles');&#10;  if ($op != 'view' &amp;&amp; !empty($restricted)) {&#10;&#10;    // Now check the roles for this account against the restrictions.&#10;    foreach ($account&#10;      -&gt;getRoles() as $rid) {&#10;      if (in_array($rid, $restricted)) {&#10;        $grants = [];&#10;      }&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_node_grants_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_node_links_alter" value="/**&#10; * Implements hook_node_links_alter().&#10; */&#10;function $MODULE$_node_links_alter(array &amp;$links, NodeInterface $entity, array &amp;$context) {&#10;  $links['mymodule'] = [&#10;    '#theme' =&gt; 'links__node__mymodule',&#10;    '#attributes' =&gt; [&#10;      'class' =&gt; [&#10;        'links',&#10;        'inline',&#10;      ],&#10;    ],&#10;    '#links' =&gt; [&#10;      'node-report' =&gt; [&#10;        'title' =&gt; t('Report'),&#10;        'url' =&gt; Url::fromRoute('node_test.report', [&#10;          'node' =&gt; $entity&#10;            -&gt;id(),&#10;        ], [&#10;          'query' =&gt; [&#10;            'token' =&gt; \Drupal::getContainer()&#10;              -&gt;get('csrf_token')&#10;              -&gt;get(&quot;node/{$entity-&gt;id()}/report&quot;),&#10;          ],&#10;        ]),&#10;      ],&#10;    ],&#10;  ];&#10;}" shortcut="SPACE" description="hook_node_links_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_node_search_result" value="/**&#10; * Implements hook_node_search_result().&#10; */&#10;function $MODULE$_node_search_result(\Drupal\node\NodeInterface $node) {&#10;  $rating = \Drupal::database()&#10;    -&gt;query('SELECT SUM(points) FROM {my_rating} WHERE nid = :nid', [&#10;    'nid' =&gt; $node&#10;      -&gt;id(),&#10;  ])&#10;    -&gt;fetchField();&#10;  return [&#10;    'rating' =&gt; \Drupal::translation()&#10;      -&gt;formatPlural($rating, '1 point', '@count points'),&#10;  ];&#10;}" shortcut="SPACE" description="hook_node_search_result()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_node_update_index" value="/**&#10; * Implements hook_node_update_index().&#10; */&#10;function $MODULE$_node_update_index(\Drupal\node\NodeInterface $node) {&#10;  $text = '';&#10;  $ratings = \Drupal::database()&#10;    -&gt;query('SELECT title, description FROM {my_ratings} WHERE nid = :nid', [&#10;    ':nid' =&gt; $node&#10;      -&gt;id(),&#10;  ]);&#10;  foreach ($ratings as $rating) {&#10;    $text .= '&lt;h2&gt;' . Html::escape($rating-&gt;title) . '&lt;/h2&gt;' . Xss::filter($rating-&gt;description);&#10;  }&#10;  return $text;&#10;}" shortcut="SPACE" description="hook_node_update_index()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_oembed_resource_url_alter" value="/**&#10; * Implements hook_oembed_resource_url_alter().&#10; */&#10;function $MODULE$_oembed_resource_url_alter(array &amp;$parsed_url, \Drupal\media\OEmbed\Provider $provider) {&#10;&#10;  // Always serve YouTube videos from youtube-nocookie.com.&#10;  if ($provider&#10;    -&gt;getName() === 'YouTube') {&#10;    $parsed_url['path'] = str_replace('://youtube.com/', '://youtube-nocookie.com/', $parsed_url['path']);&#10;  }&#10;}" shortcut="SPACE" description="hook_oembed_resource_url_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_options_list_alter" value="/**&#10; * Implements hook_options_list_alter().&#10; */&#10;function $MODULE$_options_list_alter(array &amp;$options, array $context) {&#10;&#10;  // Check if this is the field we want to change.&#10;  if ($context['fieldDefinition']&#10;    -&gt;getName() == 'field_option') {&#10;&#10;    // Change the label of the empty option.&#10;    $options['_none'] = t('== Empty ==');&#10;  }&#10;}" shortcut="SPACE" description="hook_options_list_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_page_attachments" value="/**&#10; * Implements hook_page_attachments().&#10; */&#10;function $MODULE$_page_attachments(array &amp;$attachments) {&#10;&#10;  // Unconditionally attach an asset to the page.&#10;  $attachments['#attached']['library'][] = 'core/drupalSettings';&#10;&#10;  // Conditionally attach an asset to the page.&#10;  if (!\Drupal::currentUser()&#10;    -&gt;hasPermission('may pet kittens')) {&#10;    $attachments['#attached']['library'][] = 'core/jquery';&#10;  }&#10;}" shortcut="SPACE" description="hook_page_attachments()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_page_attachments_alter" value="/**&#10; * Implements hook_page_attachments_alter().&#10; */&#10;function $MODULE$_page_attachments_alter(array &amp;$attachments) {&#10;&#10;  // Conditionally remove an asset.&#10;  if (in_array('core/jquery', $attachments['#attached']['library'])) {&#10;    $index = array_search('core/jquery', $attachments['#attached']['library']);&#10;    unset($attachments['#attached']['library'][$index]);&#10;  }&#10;}" shortcut="SPACE" description="hook_page_attachments_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_page_bottom" value="/**&#10; * Implements hook_page_bottom().&#10; */&#10;function $MODULE$_page_bottom(array &amp;$page_bottom) {&#10;  $page_bottom['mymodule'] = [&#10;    '#markup' =&gt; 'This is the bottom.',&#10;  ];&#10;}" shortcut="SPACE" description="hook_page_bottom()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_page_top" value="/**&#10; * Implements hook_page_top().&#10; */&#10;function $MODULE$_page_top(array &amp;$page_top) {&#10;  $page_top['mymodule'] = [&#10;    '#markup' =&gt; 'This is the top.',&#10;  ];&#10;}" shortcut="SPACE" description="hook_page_top()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_plugin_filter_TYPE_alter" value="/**&#10; * Implements hook_plugin_filter_TYPE_alter().&#10; */&#10;function $MODULE$_plugin_filter_$TYPE$_alter(array &amp;$definitions, array $extra, $consumer) {&#10;&#10;  // Remove the &quot;Help&quot; block from the Block UI list.&#10;  if ($consumer == 'block_ui') {&#10;    unset($definitions['help_block']);&#10;  }&#10;&#10;  // If the theme is specified, remove the branding block from the Bartik theme.&#10;  if (isset($extra['theme']) &amp;&amp; $extra['theme'] === 'bartik') {&#10;    unset($definitions['system_branding_block']);&#10;  }&#10;&#10;  // Remove the &quot;Main page content&quot; block from everywhere.&#10;  unset($definitions['system_main_block']);&#10;}" shortcut="SPACE" description="hook_plugin_filter_TYPE_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_plugin_filter_TYPE__CONSUMER_alter" value="/**&#10; * Implements hook_plugin_filter_TYPE__CONSUMER_alter().&#10; */&#10;function $MODULE$_plugin_filter_$TYPE$__$CONSUMER$_alter(array &amp;$definitions, array $extra) {&#10;&#10;  // Explicitly remove the &quot;Help&quot; block for this consumer.&#10;  unset($definitions['help_block']);&#10;}" shortcut="SPACE" description="hook_plugin_filter_TYPE__CONSUMER_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CONSUMER" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_post_update_NAME" value="/**&#10; * Implements hook_post_update_NAME().&#10; */&#10;function $MODULE$_post_update_$NAME$(&amp;$sandbox) {&#10;&#10;  // Example of updating some content.&#10;  $node = \Drupal\node\Entity\Node::load(123);&#10;  $node&#10;    -&gt;setTitle('foo');&#10;  $node&#10;    -&gt;save();&#10;  $result = t('Node %nid saved', [&#10;    '%nid' =&gt; $node&#10;      -&gt;id(),&#10;  ]);&#10;&#10;  // Example of updating some config.&#10;  if (\Drupal::moduleHandler()&#10;    -&gt;moduleExists('taxonomy')) {&#10;&#10;    // Update the dependencies of all Vocabulary configuration entities.&#10;    \Drupal::classResolver(\Drupal\Core\Config\Entity\ConfigEntityUpdater::class)&#10;      -&gt;update($sandbox, 'taxonomy_vocabulary');&#10;  }&#10;  return $result;&#10;}" shortcut="SPACE" description="hook_post_update_NAME()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_preprocess" value="/**&#10; * Implements hook_preprocess().&#10; */&#10;function $MODULE$_preprocess(&amp;$variables, $hook) {&#10;  static $hooks;&#10;&#10;  // Add contextual links to the variables, if the user has permission.&#10;  if (!\Drupal::currentUser()&#10;    -&gt;hasPermission('access contextual links')) {&#10;    return;&#10;  }&#10;  if (!isset($hooks)) {&#10;    $hooks = theme_get_registry();&#10;  }&#10;&#10;  // Determine the primary theme function argument.&#10;  if (isset($hooks[$hook]['variables'])) {&#10;    $keys = array_keys($hooks[$hook]['variables']);&#10;    $key = $keys[0];&#10;  }&#10;  else {&#10;    $key = $hooks[$hook]['render element'];&#10;  }&#10;  if (isset($variables[$key])) {&#10;    $element = $variables[$key];&#10;  }&#10;  if (isset($element) &amp;&amp; is_array($element) &amp;&amp; !empty($element['#contextual_links'])) {&#10;    $variables['title_suffix']['contextual_links'] = contextual_links_view($element);&#10;    if (!empty($variables['title_suffix']['contextual_links'])) {&#10;      $variables['attributes']['class'][] = 'contextual-links-region';&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_preprocess()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_preprocess_HOOK" value="/**&#10; * Implements hook_preprocess_HOOK().&#10; */&#10;function $MODULE$_preprocess_$HOOK$(&amp;$variables) {&#10;&#10;  // This example is from rdf_preprocess_image(). It adds an RDF attribute&#10;  // to the image hook's variables.&#10;  $variables['attributes']['typeof'] = [&#10;    'foaf:Image',&#10;  ];&#10;}" shortcut="SPACE" description="hook_preprocess_HOOK()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="HOOK" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_query_alter" value="/**&#10; * Implements hook_query_alter().&#10; */&#10;function $MODULE$_query_alter(Drupal\Core\Database\Query\AlterableInterface $query) {&#10;  if ($query&#10;    -&gt;hasTag('micro_limit')) {&#10;    $query&#10;      -&gt;range(0, 2);&#10;  }&#10;}" shortcut="SPACE" description="hook_query_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_query_TAG_alter" value="/**&#10; * Implements hook_query_TAG_alter().&#10; */&#10;function $MODULE$_query_$TAG$_alter(Drupal\Core\Database\Query\AlterableInterface $query) {&#10;&#10;  // This is an example of a possible hook_query_media_access_alter()&#10;  // implementation. In other words, alter queries of media entities that&#10;  // require access control (have the 'media_access' query tag).&#10;  // Determine which media entities we want to remove from the query. In this&#10;  // example, we hard-code some media IDs.&#10;  $media_entities_to_hide = [&#10;    1,&#10;    3,&#10;  ];&#10;&#10;  // In this example, we're only interested in applying our media access&#10;  // restrictions to SELECT queries. hook_media_access() can be used to apply&#10;  // access control to 'update' and 'delete' operations.&#10;  if (!$query instanceof SelectInterface) {&#10;    return;&#10;  }&#10;&#10;  // The tables in the query. This can include media entity tables and other&#10;  // tables. Tables might be joined more than once, with aliases.&#10;  $query_tables = $query&#10;    -&gt;getTables();&#10;&#10;  // The tables belonging to media entity storage.&#10;  $table_mapping = \Drupal::entityTypeManager()&#10;    -&gt;getStorage('media')&#10;    -&gt;getTableMapping();&#10;  $media_tables = $table_mapping&#10;    -&gt;getTableNames();&#10;&#10;  // For each table in the query, if it's a media entity storage table, add a&#10;  // condition to filter out records belonging to a media entity that we wish&#10;  // to hide.&#10;  foreach ($query_tables as $alias =&gt; $info) {&#10;&#10;    // Skip over subqueries.&#10;    if ($info['table'] instanceof SelectInterface) {&#10;      continue;&#10;    }&#10;    $real_table_name = $info['table'];&#10;    if (in_array($real_table_name, $media_tables)) {&#10;      $query&#10;        -&gt;condition(&quot;{$alias}.mid&quot;, $media_entities_to_hide, 'NOT IN');&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_query_TAG_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="TAG" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_queue_info_alter" value="/**&#10; * Implements hook_queue_info_alter().&#10; */&#10;function $MODULE$_queue_info_alter(&amp;$queues) {&#10;&#10;  // This site has many feeds so let's spend 90 seconds on each cron run&#10;  // updating feeds instead of the default 60.&#10;  $queues['aggregator_feeds']['cron']['time'] = 90;&#10;}" shortcut="SPACE" description="hook_queue_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_quickedit_editor_alter" value="/**&#10; * Implements hook_quickedit_editor_alter().&#10; */&#10;function $MODULE$_quickedit_editor_alter(&amp;$editors) {&#10;&#10;  // Cleanly override editor.module's in-place editor plugin.&#10;  $editors['editor']['class'] = 'Drupal\\advanced_editor\\Plugin\\quickedit\\editor\\AdvancedEditor';&#10;}" shortcut="SPACE" description="hook_quickedit_editor_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_quickedit_render_field" value="/**&#10; * Implements hook_quickedit_render_field().&#10; */&#10;function $MODULE$_quickedit_render_field(Drupal\Core\Entity\EntityInterface $entity, $field_name, $view_mode_id, $langcode) {&#10;  return [&#10;    '#prefix' =&gt; '&lt;div class=&quot;example-markup&quot;&gt;',&#10;    'field' =&gt; $entity&#10;      -&gt;getTranslation($langcode)&#10;      -&gt;get($field_name)&#10;      -&gt;view($view_mode_id),&#10;    '#suffix' =&gt; '&lt;/div&gt;',&#10;  ];&#10;}" shortcut="SPACE" description="hook_quickedit_render_field()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_ranking" value="/**&#10; * Implements hook_ranking().&#10; */&#10;function $MODULE$_ranking() {&#10;&#10;  // If voting is disabled, we can avoid returning the array, no hard feelings.&#10;  if (\Drupal::config('vote.settings')&#10;    -&gt;get('node_enabled')) {&#10;    return [&#10;      'vote_average' =&gt; [&#10;        'title' =&gt; t('Average vote'),&#10;        // Note that we use i.sid, the search index's search item id, rather than&#10;        // n.nid.&#10;        'join' =&gt; [&#10;          'type' =&gt; 'LEFT',&#10;          'table' =&gt; 'vote_node_data',&#10;          'alias' =&gt; 'vote_node_data',&#10;          'on' =&gt; 'vote_node_data.nid = i.sid',&#10;        ],&#10;        // The highest possible score should be 1, and the lowest possible score,&#10;        // always 0, should be 0.&#10;        'score' =&gt; 'vote_node_data.average / CAST(%f AS DECIMAL)',&#10;        // Pass in the highest possible voting score as a decimal argument.&#10;        'arguments' =&gt; [&#10;          \Drupal::config('vote.settings')&#10;            -&gt;get('score_max'),&#10;        ],&#10;      ],&#10;    ];&#10;  }&#10;}" shortcut="SPACE" description="hook_ranking()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_rdf_namespaces" value="/**&#10; * Implements hook_rdf_namespaces().&#10; */&#10;function $MODULE$_rdf_namespaces() {&#10;  return [&#10;    'content' =&gt; 'http://purl.org/rss/1.0/modules/content/',&#10;    'dc' =&gt; 'http://purl.org/dc/terms/',&#10;    'foaf' =&gt; 'http://xmlns.com/foaf/0.1/',&#10;    'og' =&gt; 'http://ogp.me/ns#',&#10;    'rdfs' =&gt; 'http://www.w3.org/2000/01/rdf-schema#',&#10;    'sioc' =&gt; 'http://rdfs.org/sioc/ns#',&#10;    'sioct' =&gt; 'http://rdfs.org/sioc/types#',&#10;    'skos' =&gt; 'http://www.w3.org/2004/02/skos/core#',&#10;    'xsd' =&gt; 'http://www.w3.org/2001/XMLSchema#',&#10;  ];&#10;}" shortcut="SPACE" description="hook_rdf_namespaces()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_rebuild" value="/**&#10; * Implements hook_rebuild().&#10; */&#10;function $MODULE$_rebuild() {&#10;  $themes = \Drupal::service('theme_handler')&#10;    -&gt;listInfo();&#10;  foreach ($themes as $theme) {&#10;    _block_rehash($theme&#10;      -&gt;getName());&#10;  }&#10;}" shortcut="SPACE" description="hook_rebuild()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_removed_post_updates" value="/**&#10; * Implements hook_removed_post_updates().&#10; */&#10;function $MODULE$_removed_post_updates() {&#10;  return [&#10;    'mymodule_post_update_foo' =&gt; '8.x-2.0',&#10;    'mymodule_post_update_bar' =&gt; '8.x-3.0',&#10;    'mymodule_post_update_baz' =&gt; '8.x-3.0',&#10;  ];&#10;}" shortcut="SPACE" description="hook_removed_post_updates()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_render_template" value="/**&#10; * Implements hook_render_template().&#10; */&#10;function $MODULE$_render_template($template_file, $variables) {&#10;  $twig_service = \Drupal::service('twig');&#10;  return $twig_service&#10;    -&gt;loadTemplate($template_file)&#10;    -&gt;render($variables);&#10;}" shortcut="SPACE" description="hook_render_template()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_requirements" value="/**&#10; * Implements hook_requirements().&#10; */&#10;function $MODULE$_requirements($phase) {&#10;  $requirements = [];&#10;&#10;  // Report Drupal version&#10;  if ($phase == 'runtime') {&#10;    $requirements['drupal'] = [&#10;      'title' =&gt; t('Drupal'),&#10;      'value' =&gt; \Drupal::VERSION,&#10;      'severity' =&gt; REQUIREMENT_INFO,&#10;    ];&#10;  }&#10;&#10;  // Test PHP version&#10;  $requirements['php'] = [&#10;    'title' =&gt; t('PHP'),&#10;    'value' =&gt; $phase == 'runtime' ? Link::fromTextAndUrl(phpversion(), Url::fromRoute('system.php'))&#10;      -&gt;toString() : phpversion(),&#10;  ];&#10;  if (version_compare(phpversion(), \Drupal::MINIMUM_PHP) &lt; 0) {&#10;    $requirements['php']['description'] = t('Your PHP installation is too old. Drupal requires at least PHP %version.', [&#10;      '%version' =&gt; \Drupal::MINIMUM_PHP,&#10;    ]);&#10;    $requirements['php']['severity'] = REQUIREMENT_ERROR;&#10;  }&#10;&#10;  // Report cron status&#10;  if ($phase == 'runtime') {&#10;    $cron_last = \Drupal::state()&#10;      -&gt;get('system.cron_last');&#10;    if (is_numeric($cron_last)) {&#10;      $requirements['cron']['value'] = t('Last run @time ago', [&#10;        '@time' =&gt; \Drupal::service('date.formatter')&#10;          -&gt;formatTimeDiffSince($cron_last),&#10;      ]);&#10;    }&#10;    else {&#10;      $requirements['cron'] = [&#10;        'description' =&gt; t('Cron has not run. It appears cron jobs have not been setup on your system. Check the help pages for &lt;a href=&quot;:url&quot;&gt;configuring cron jobs&lt;/a&gt;.', [&#10;          ':url' =&gt; 'https://www.drupal.org/cron',&#10;        ]),&#10;        'severity' =&gt; REQUIREMENT_ERROR,&#10;        'value' =&gt; t('Never run'),&#10;      ];&#10;    }&#10;    $requirements['cron']['description'] .= ' ' . t('You can &lt;a href=&quot;:cron&quot;&gt;run cron manually&lt;/a&gt;.', [&#10;      ':cron' =&gt; Url::fromRoute('system.run_cron')&#10;        -&gt;toString(),&#10;    ]);&#10;    $requirements['cron']['title'] = t('Cron maintenance tasks');&#10;  }&#10;  return $requirements;&#10;}" shortcut="SPACE" description="hook_requirements()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_rest_resource_alter" value="/**&#10; * Implements hook_rest_resource_alter().&#10; */&#10;function $MODULE$_rest_resource_alter(&amp;$definitions) {&#10;  if (isset($definitions['entity:node'])) {&#10;&#10;    // We want to handle REST requests regarding nodes with our own plugin&#10;    // class.&#10;    $definitions['entity:node']['class'] = 'Drupal\\mymodule\\Plugin\\rest\\resource\\NodeResource';&#10;&#10;    // Serialized nodes should be expanded to my specific node class.&#10;    $definitions['entity:node']['serialization_class'] = 'Drupal\\mymodule\\Entity\\MyNode';&#10;  }&#10;&#10;  // We don't want Views to show up in the array of plugins at all.&#10;  unset($definitions['entity:view']);&#10;}" shortcut="SPACE" description="hook_rest_resource_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_schema" value="/**&#10; * Implements hook_schema().&#10; */&#10;function $MODULE$_schema() {&#10;  $schema['users_data'] = [&#10;    'description' =&gt; 'Stores module data as key/value pairs per user.',&#10;    'fields' =&gt; [&#10;      'uid' =&gt; [&#10;        'description' =&gt; 'The {users}.uid this record affects.',&#10;        'type' =&gt; 'int',&#10;        'unsigned' =&gt; TRUE,&#10;        'not null' =&gt; TRUE,&#10;        'default' =&gt; 0,&#10;      ],&#10;      'module' =&gt; [&#10;        'description' =&gt; 'The name of the module declaring the variable.',&#10;        'type' =&gt; 'varchar_ascii',&#10;        'length' =&gt; DRUPAL_EXTENSION_NAME_MAX_LENGTH,&#10;        'not null' =&gt; TRUE,&#10;        'default' =&gt; '',&#10;      ],&#10;      'name' =&gt; [&#10;        'description' =&gt; 'The identifier of the data.',&#10;        'type' =&gt; 'varchar_ascii',&#10;        'length' =&gt; 128,&#10;        'not null' =&gt; TRUE,&#10;        'default' =&gt; '',&#10;      ],&#10;      'value' =&gt; [&#10;        'description' =&gt; 'The value.',&#10;        'type' =&gt; 'blob',&#10;        'not null' =&gt; FALSE,&#10;        'size' =&gt; 'big',&#10;      ],&#10;      'serialized' =&gt; [&#10;        'description' =&gt; 'Whether value is serialized.',&#10;        'type' =&gt; 'int',&#10;        'size' =&gt; 'tiny',&#10;        'unsigned' =&gt; TRUE,&#10;        'default' =&gt; 0,&#10;      ],&#10;    ],&#10;    'primary key' =&gt; [&#10;      'uid',&#10;      'module',&#10;      'name',&#10;    ],&#10;    'indexes' =&gt; [&#10;      'module' =&gt; [&#10;        'module',&#10;      ],&#10;      'name' =&gt; [&#10;        'name',&#10;      ],&#10;    ],&#10;    // For documentation purposes only; foreign keys are not created in the&#10;    // database.&#10;    'foreign keys' =&gt; [&#10;      'data_user' =&gt; [&#10;        'table' =&gt; 'users',&#10;        'columns' =&gt; [&#10;          'uid' =&gt; 'uid',&#10;        ],&#10;      ],&#10;    ],&#10;  ];&#10;  return $schema;&#10;}" shortcut="SPACE" description="hook_schema()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_search_plugin_alter" value="/**&#10; * Implements hook_search_plugin_alter().&#10; */&#10;function $MODULE$_search_plugin_alter(array &amp;$definitions) {&#10;  if (isset($definitions['node_search'])) {&#10;    $definitions['node_search']['title'] = t('Nodes');&#10;  }&#10;}" shortcut="SPACE" description="hook_search_plugin_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_search_preprocess" value="/**&#10; * Implements hook_search_preprocess().&#10; */&#10;function $MODULE$_search_preprocess($text, $langcode = NULL) {&#10;&#10;  // If the language is not set, get it from the language manager.&#10;  if (!isset($langcode)) {&#10;    $langcode = \Drupal::languageManager()&#10;      -&gt;getCurrentLanguage()&#10;      -&gt;getId();&#10;  }&#10;&#10;  // If the langcode is set to 'en' then add variations of the word &quot;testing&quot;&#10;  // which can also be found during English language searches.&#10;  if ($langcode == 'en') {&#10;&#10;    // Add the alternate verb forms for the word &quot;testing&quot;.&#10;    if ($text == 'we are testing') {&#10;      $text .= ' test tested';&#10;    }&#10;  }&#10;  return $text;&#10;}" shortcut="SPACE" description="hook_search_preprocess()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_shortcut_default_set" value="/**&#10; * Implements hook_shortcut_default_set().&#10; */&#10;function $MODULE$_shortcut_default_set($account) {&#10;&#10;  // Use a special set of default shortcuts for administrators only.&#10;  $roles = \Drupal::entityTypeManager()&#10;    -&gt;getStorage('user_role')&#10;    -&gt;loadByProperties([&#10;    'is_admin' =&gt; TRUE,&#10;  ]);&#10;  $user_admin_roles = array_intersect(array_keys($roles), $account&#10;    -&gt;getRoles());&#10;  if ($user_admin_roles) {&#10;    return 'admin-shortcuts';&#10;  }&#10;}" shortcut="SPACE" description="hook_shortcut_default_set()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_system_breadcrumb_alter" value="/**&#10; * Implements hook_system_breadcrumb_alter().&#10; */&#10;function $MODULE$_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &amp;$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {&#10;&#10;  // Add an item to the end of the breadcrumb.&#10;  $breadcrumb&#10;    -&gt;addLink(\Drupal\Core\Link::createFromRoute(t('Text'), 'example_route_name'));&#10;}" shortcut="SPACE" description="hook_system_breadcrumb_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_system_info_alter" value="/**&#10; * Implements hook_system_info_alter().&#10; */&#10;function $MODULE$_system_info_alter(array &amp;$info, \Drupal\Core\Extension\Extension $file, $type) {&#10;&#10;  // Only fill this in if the .info.yml file does not define a 'datestamp'.&#10;  if (empty($info['datestamp'])) {&#10;    $info['datestamp'] = $file&#10;      -&gt;getMTime();&#10;  }&#10;}" shortcut="SPACE" description="hook_system_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_system_themes_page_alter" value="/**&#10; * Implements hook_system_themes_page_alter().&#10; */&#10;function $MODULE$_system_themes_page_alter(&amp;$theme_groups) {&#10;  foreach ($theme_groups as $state =&gt; &amp;$group) {&#10;    foreach ($theme_groups[$state] as &amp;$theme) {&#10;&#10;      // Add a foo link to each list of theme operations.&#10;      $theme-&gt;operations[] = [&#10;        'title' =&gt; t('Foo'),&#10;        'url' =&gt; Url::fromRoute('system.themes_page'),&#10;        'query' =&gt; [&#10;          'theme' =&gt; $theme&#10;            -&gt;getName(),&#10;        ],&#10;      ];&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_system_themes_page_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_template_preprocess_default_variables_alter" value="/**&#10; * Implements hook_template_preprocess_default_variables_alter().&#10; */&#10;function $MODULE$_template_preprocess_default_variables_alter(&amp;$variables) {&#10;  $variables['is_admin'] = \Drupal::currentUser()&#10;    -&gt;hasPermission('access administration pages');&#10;}" shortcut="SPACE" description="hook_template_preprocess_default_variables_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_theme" value="/**&#10; * Implements hook_theme().&#10; */&#10;function $MODULE$_theme($existing, $type, $theme, $path) {&#10;  return [&#10;    'forum_display' =&gt; [&#10;      'variables' =&gt; [&#10;        'forums' =&gt; NULL,&#10;        'topics' =&gt; NULL,&#10;        'parents' =&gt; NULL,&#10;        'tid' =&gt; NULL,&#10;        'sortby' =&gt; NULL,&#10;        'forum_per_page' =&gt; NULL,&#10;      ],&#10;    ],&#10;    'forum_list' =&gt; [&#10;      'variables' =&gt; [&#10;        'forums' =&gt; NULL,&#10;        'parents' =&gt; NULL,&#10;        'tid' =&gt; NULL,&#10;      ],&#10;    ],&#10;    'forum_icon' =&gt; [&#10;      'variables' =&gt; [&#10;        'new_posts' =&gt; NULL,&#10;        'num_posts' =&gt; 0,&#10;        'comment_mode' =&gt; 0,&#10;        'sticky' =&gt; 0,&#10;      ],&#10;    ],&#10;    'status_report' =&gt; [&#10;      'render element' =&gt; 'requirements',&#10;      'file' =&gt; 'system.admin.inc',&#10;    ],&#10;  ];&#10;}" shortcut="SPACE" description="hook_theme()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_themes_installed" value="/**&#10; * Implements hook_themes_installed().&#10; */&#10;function $MODULE$_themes_installed($theme_list) {&#10;  foreach ($theme_list as $theme) {&#10;    block_theme_initialize($theme);&#10;  }&#10;}" shortcut="SPACE" description="hook_themes_installed()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_themes_uninstalled" value="/**&#10; * Implements hook_themes_uninstalled().&#10; */&#10;function $MODULE$_themes_uninstalled(array $themes) {&#10;&#10;  // Remove some state entries depending on the theme.&#10;  foreach ($themes as $theme) {&#10;    \Drupal::state()&#10;      -&gt;delete('example.' . $theme);&#10;  }&#10;}" shortcut="SPACE" description="hook_themes_uninstalled()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_theme_registry_alter" value="/**&#10; * Implements hook_theme_registry_alter().&#10; */&#10;function $MODULE$_theme_registry_alter(&amp;$theme_registry) {&#10;&#10;  // Kill the next/previous forum topic navigation links.&#10;  foreach ($theme_registry['forum_topic_navigation']['preprocess functions'] as $key =&gt; $value) {&#10;    if ($value == 'template_preprocess_forum_topic_navigation') {&#10;      unset($theme_registry['forum_topic_navigation']['preprocess functions'][$key]);&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_theme_registry_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_theme_suggestions_alter" value="/**&#10; * Implements hook_theme_suggestions_alter().&#10; */&#10;function $MODULE$_theme_suggestions_alter(array &amp;$suggestions, array $variables, $hook) {&#10;&#10;  // Add an interface-language specific suggestion to all theme hooks.&#10;  $suggestions[] = $hook . '__' . \Drupal::languageManager()&#10;    -&gt;getCurrentLanguage()&#10;    -&gt;getId();&#10;}" shortcut="SPACE" description="hook_theme_suggestions_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_theme_suggestions_HOOK" value="/**&#10; * Implements hook_theme_suggestions_HOOK().&#10; */&#10;function $MODULE$_theme_suggestions_$HOOK$(array $variables) {&#10;  $suggestions = [];&#10;  $suggestions[] = 'hookname__' . $variables['elements']['#langcode'];&#10;  return $suggestions;&#10;}" shortcut="SPACE" description="hook_theme_suggestions_HOOK()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="HOOK" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_theme_suggestions_HOOK_alter" value="/**&#10; * Implements hook_theme_suggestions_HOOK_alter().&#10; */&#10;function $MODULE$_theme_suggestions_$HOOK$_alter(array &amp;$suggestions, array $variables) {&#10;  if (empty($variables['header'])) {&#10;    $suggestions[] = 'hookname__no_header';&#10;  }&#10;}" shortcut="SPACE" description="hook_theme_suggestions_HOOK_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="HOOK" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_tokens" value="/**&#10; * Implements hook_tokens().&#10; */&#10;function $MODULE$_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {&#10;  $token_service = \Drupal::token();&#10;  $url_options = [&#10;    'absolute' =&gt; TRUE,&#10;  ];&#10;  if (isset($options['langcode'])) {&#10;    $url_options['language'] = \Drupal::languageManager()&#10;      -&gt;getLanguage($options['langcode']);&#10;    $langcode = $options['langcode'];&#10;  }&#10;  else {&#10;    $langcode = NULL;&#10;  }&#10;  $replacements = [];&#10;  if ($type == 'node' &amp;&amp; !empty($data['node'])) {&#10;&#10;    /** @var \Drupal\node\NodeInterface $node */&#10;    $node = $data['node'];&#10;    foreach ($tokens as $name =&gt; $original) {&#10;      switch ($name) {&#10;&#10;        // Simple key values on the node.&#10;        case 'nid':&#10;          $replacements[$original] = $node-&gt;nid;&#10;          break;&#10;        case 'title':&#10;          $replacements[$original] = $node&#10;            -&gt;getTitle();&#10;          break;&#10;        case 'edit-url':&#10;          $replacements[$original] = $node&#10;            -&gt;toUrl('edit-form', $url_options)&#10;            -&gt;toString();&#10;          break;&#10;&#10;        // Default values for the chained tokens handled below.&#10;        case 'author':&#10;          $account = $node&#10;            -&gt;getOwner() ? $node&#10;            -&gt;getOwner() : User::load(0);&#10;          $replacements[$original] = $account&#10;            -&gt;label();&#10;          $bubbleable_metadata&#10;            -&gt;addCacheableDependency($account);&#10;          break;&#10;        case 'created':&#10;          $replacements[$original] = \Drupal::service('date.formatter')&#10;            -&gt;format($node&#10;            -&gt;getCreatedTime(), 'medium', '', NULL, $langcode);&#10;          break;&#10;      }&#10;    }&#10;    if ($author_tokens = $token_service&#10;      -&gt;findWithPrefix($tokens, 'author')) {&#10;      $replacements += $token_service&#10;        -&gt;generate('user', $author_tokens, [&#10;        'user' =&gt; $node&#10;          -&gt;getOwner(),&#10;      ], $options, $bubbleable_metadata);&#10;    }&#10;    if ($created_tokens = $token_service&#10;      -&gt;findWithPrefix($tokens, 'created')) {&#10;      $replacements += $token_service&#10;        -&gt;generate('date', $created_tokens, [&#10;        'date' =&gt; $node&#10;          -&gt;getCreatedTime(),&#10;      ], $options, $bubbleable_metadata);&#10;    }&#10;  }&#10;  return $replacements;&#10;}" shortcut="SPACE" description="hook_tokens()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_tokens_alter" value="/**&#10; * Implements hook_tokens_alter().&#10; */&#10;function $MODULE$_tokens_alter(array &amp;$replacements, array $context, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {&#10;  if ($context['type'] == 'node' &amp;&amp; !empty($context['data']['node'])) {&#10;    $node = $context['data']['node'];&#10;&#10;    // Alter the [node:title] token, and replace it with the rendered content&#10;    // of a field (field_title).&#10;    if (isset($context['tokens']['title'])) {&#10;      $title = $node-&gt;field_title&#10;        -&gt;view('default');&#10;      $replacements[$context['tokens']['title']] = \Drupal::service('renderer')&#10;        -&gt;render($title);&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_tokens_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_token_info" value="/**&#10; * Implements hook_token_info().&#10; */&#10;function $MODULE$_token_info() {&#10;  $type = [&#10;    'name' =&gt; t('Nodes'),&#10;    'description' =&gt; t('Tokens related to individual nodes.'),&#10;    'needs-data' =&gt; 'node',&#10;  ];&#10;&#10;  // Core tokens for nodes.&#10;  $node['nid'] = [&#10;    'name' =&gt; t(&quot;Node ID&quot;),&#10;    'description' =&gt; t(&quot;The unique ID of the node.&quot;),&#10;  ];&#10;  $node['title'] = [&#10;    'name' =&gt; t(&quot;Title&quot;),&#10;  ];&#10;  $node['edit-url'] = [&#10;    'name' =&gt; t(&quot;Edit URL&quot;),&#10;    'description' =&gt; t(&quot;The URL of the node's edit page.&quot;),&#10;  ];&#10;&#10;  // Chained tokens for nodes.&#10;  $node['created'] = [&#10;    'name' =&gt; t(&quot;Date created&quot;),&#10;    'type' =&gt; 'date',&#10;  ];&#10;  $node['author'] = [&#10;    'name' =&gt; t(&quot;Author&quot;),&#10;    'type' =&gt; 'user',&#10;  ];&#10;  return [&#10;    'types' =&gt; [&#10;      'node' =&gt; $type,&#10;    ],&#10;    'tokens' =&gt; [&#10;      'node' =&gt; $node,&#10;    ],&#10;  ];&#10;}" shortcut="SPACE" description="hook_token_info()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_token_info_alter" value="/**&#10; * Implements hook_token_info_alter().&#10; */&#10;function $MODULE$_token_info_alter(&amp;$data) {&#10;&#10;  // Modify description of node tokens for our site.&#10;  $data['tokens']['node']['nid'] = [&#10;    'name' =&gt; t(&quot;Node ID&quot;),&#10;    'description' =&gt; t(&quot;The unique ID of the article.&quot;),&#10;  ];&#10;  $data['tokens']['node']['title'] = [&#10;    'name' =&gt; t(&quot;Title&quot;),&#10;    'description' =&gt; t(&quot;The title of the article.&quot;),&#10;  ];&#10;&#10;  // Chained tokens for nodes.&#10;  $data['tokens']['node']['created'] = [&#10;    'name' =&gt; t(&quot;Date created&quot;),&#10;    'description' =&gt; t(&quot;The date the article was posted.&quot;),&#10;    'type' =&gt; 'date',&#10;  ];&#10;}" shortcut="SPACE" description="hook_token_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_toolbar" value="/**&#10; * Implements hook_toolbar().&#10; */&#10;function $MODULE$_toolbar() {&#10;  $items = [];&#10;&#10;  // Add a search field to the toolbar. The search field employs no toolbar&#10;  // module theming functions.&#10;  $items['global_search'] = [&#10;    '#type' =&gt; 'toolbar_item',&#10;    'tab' =&gt; [&#10;      '#type' =&gt; 'search',&#10;      '#attributes' =&gt; [&#10;        'placeholder' =&gt; t('Search the site'),&#10;        'class' =&gt; [&#10;          'search-global',&#10;        ],&#10;      ],&#10;    ],&#10;    '#weight' =&gt; 200,&#10;    // Custom CSS, JS or a library can be associated with the toolbar item.&#10;    '#attached' =&gt; [&#10;      'library' =&gt; [&#10;        'search/global',&#10;      ],&#10;    ],&#10;  ];&#10;&#10;  // The 'Home' tab is a simple link, which is wrapped in markup associated&#10;  // with a visual tab styling.&#10;  $items['home'] = [&#10;    '#type' =&gt; 'toolbar_item',&#10;    'tab' =&gt; [&#10;      '#type' =&gt; 'link',&#10;      '#title' =&gt; t('Home'),&#10;      '#url' =&gt; Url::fromRoute('&lt;front&gt;'),&#10;      '#options' =&gt; [&#10;        'attributes' =&gt; [&#10;          'title' =&gt; t('Home page'),&#10;          'class' =&gt; [&#10;            'toolbar-icon',&#10;            'toolbar-icon-home',&#10;          ],&#10;        ],&#10;      ],&#10;    ],&#10;    '#weight' =&gt; -20,&#10;  ];&#10;&#10;  // A tray may be associated with a tab.&#10;  //&#10;  // When the tab is activated, the tray will become visible, either in a&#10;  // horizontal or vertical orientation on the screen.&#10;  //&#10;  // The tray should contain a renderable array. An optional #heading property&#10;  // can be passed. This text is written to a heading tag in the tray as a&#10;  // landmark for accessibility.&#10;  $items['commerce'] = [&#10;    '#type' =&gt; 'toolbar_item',&#10;    'tab' =&gt; [&#10;      '#type' =&gt; 'link',&#10;      '#title' =&gt; t('Shopping cart'),&#10;      '#url' =&gt; Url::fromRoute('cart'),&#10;      '#options' =&gt; [&#10;        'attributes' =&gt; [&#10;          'title' =&gt; t('Shopping cart'),&#10;        ],&#10;      ],&#10;    ],&#10;    'tray' =&gt; [&#10;      '#heading' =&gt; t('Shopping cart actions'),&#10;      'shopping_cart' =&gt; [&#10;        '#theme' =&gt; 'item_list',&#10;        '#items' =&gt; [],&#10;      ],&#10;    ],&#10;    '#weight' =&gt; 150,&#10;  ];&#10;&#10;  // The tray can be used to render arbitrary content.&#10;  //&#10;  // A renderable array passed to the 'tray' property will be rendered outside&#10;  // the administration bar but within the containing toolbar element.&#10;  //&#10;  // If the default behavior and styling of a toolbar tray is not desired, one&#10;  // can render content to the toolbar element and apply custom theming and&#10;  // behaviors.&#10;  $items['user_messages'] = [&#10;    // Include the toolbar_tab_wrapper to style the link like a toolbar tab.&#10;    // Exclude the theme wrapper if custom styling is desired.&#10;    '#type' =&gt; 'toolbar_item',&#10;    'tab' =&gt; [&#10;      '#type' =&gt; 'link',&#10;      '#theme' =&gt; 'user_message_toolbar_tab',&#10;      '#theme_wrappers' =&gt; [],&#10;      '#title' =&gt; t('Messages'),&#10;      '#url' =&gt; Url::fromRoute('user.message'),&#10;      '#options' =&gt; [&#10;        'attributes' =&gt; [&#10;          'title' =&gt; t('Messages'),&#10;        ],&#10;      ],&#10;    ],&#10;    'tray' =&gt; [&#10;      '#heading' =&gt; t('User messages'),&#10;      'messages' =&gt; [],&#10;    ],&#10;    '#weight' =&gt; 125,&#10;  ];&#10;  return $items;&#10;}" shortcut="SPACE" description="hook_toolbar()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_toolbar_alter" value="/**&#10; * Implements hook_toolbar_alter().&#10; */&#10;function $MODULE$_toolbar_alter(&amp;$items) {&#10;&#10;  // Move the User tab to the right.&#10;  $items['commerce']['#weight'] = 5;&#10;}" shortcut="SPACE" description="hook_toolbar_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_tour_tips_alter" value="/**&#10; * Implements hook_tour_tips_alter().&#10; */&#10;function $MODULE$_tour_tips_alter(array &amp;$tour_tips, Drupal\Core\Entity\EntityInterface $entity) {&#10;  foreach ($tour_tips as $tour_tip) {&#10;    if ($tour_tip&#10;      -&gt;get('id') == 'tour-code-test-1') {&#10;      $tour_tip&#10;        -&gt;set('body', 'Altered by hook_tour_tips_alter');&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_tour_tips_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_tour_tips_info_alter" value="/**&#10; * Implements hook_tour_tips_info_alter().&#10; */&#10;function $MODULE$_tour_tips_info_alter(&amp;$info) {&#10;&#10;  // Swap out the class used for this tip plugin.&#10;  if (isset($info['text'])) {&#10;    $info['class'] = 'Drupal\\mymodule\\Plugin\\tour\\tip\\MyCustomTipPlugin';&#10;  }&#10;}" shortcut="SPACE" description="hook_tour_tips_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_transliteration_overrides_alter" value="/**&#10; * Implements hook_transliteration_overrides_alter().&#10; */&#10;function $MODULE$_transliteration_overrides_alter(&amp;$overrides, $langcode) {&#10;&#10;  // Provide special overrides for German for a custom site.&#10;  if ($langcode == 'de') {&#10;&#10;    // The core-provided transliteration of Ä is Ae, but we want just A.&#10;    $overrides[0xc4] = 'A';&#10;  }&#10;}" shortcut="SPACE" description="hook_transliteration_overrides_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_uninstall" value="/**&#10; * Implements hook_uninstall().&#10; */&#10;function $MODULE$_uninstall($is_syncing) {&#10;&#10;  // Delete remaining general module variables.&#10;  \Drupal::state()&#10;    -&gt;delete('mymodule.foo');&#10;}" shortcut="SPACE" description="hook_uninstall()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_updater_info" value="/**&#10; * Implements hook_updater_info().&#10; */&#10;function $MODULE$_updater_info() {&#10;  return [&#10;    'module' =&gt; [&#10;      'class' =&gt; 'Drupal\\Core\\Updater\\Module',&#10;      'name' =&gt; t('Update modules'),&#10;      'weight' =&gt; 0,&#10;    ],&#10;    'theme' =&gt; [&#10;      'class' =&gt; 'Drupal\\Core\\Updater\\Theme',&#10;      'name' =&gt; t('Update themes'),&#10;      'weight' =&gt; 0,&#10;    ],&#10;  ];&#10;}" shortcut="SPACE" description="hook_updater_info()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_updater_info_alter" value="/**&#10; * Implements hook_updater_info_alter().&#10; */&#10;function $MODULE$_updater_info_alter(&amp;$updaters) {&#10;&#10;  // Adjust weight so that the theme Updater gets a chance to handle a given&#10;  // update task before module updaters.&#10;  $updaters['theme']['weight'] = -1;&#10;}" shortcut="SPACE" description="hook_updater_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_update_dependencies" value="/**&#10; * Implements hook_update_dependencies().&#10; */&#10;function $MODULE$_update_dependencies() {&#10;&#10;  // Indicate that the mymodule_update_8001() function provided by this module&#10;  // must run after the another_module_update_8003() function provided by the&#10;  // 'another_module' module.&#10;  $dependencies['mymodule'][8001] = [&#10;    'another_module' =&gt; 8003,&#10;  ];&#10;&#10;  // Indicate that the mymodule_update_8002() function provided by this module&#10;  // must run before the yet_another_module_update_8005() function provided by&#10;  // the 'yet_another_module' module. (Note that declaring dependencies in this&#10;  // direction should be done only in rare situations, since it can lead to the&#10;  // following problem: If a site has already run the yet_another_module&#10;  // module's database updates before it updates its codebase to pick up the&#10;  // newest mymodule code, then the dependency declared here will be ignored.)&#10;  $dependencies['yet_another_module'][8005] = [&#10;    'mymodule' =&gt; 8002,&#10;  ];&#10;  return $dependencies;&#10;}" shortcut="SPACE" description="hook_update_dependencies()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_update_last_removed" value="/**&#10; * Implements hook_update_last_removed().&#10; */&#10;function $MODULE$_update_last_removed() {&#10;&#10;  // We've removed the 8.x-1.x version of mymodule, including database updates.&#10;  // The next update function is mymodule_update_8200().&#10;  return 8103;&#10;}" shortcut="SPACE" description="hook_update_last_removed()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_update_N" value="/**&#10; * Implements hook_update_N().&#10; */&#10;function $MODULE$_update_$N$(&amp;$sandbox) {&#10;&#10;  // For non-batch updates, the signature can simply be:&#10;  // function hook_update_N() {&#10;  // Example function body for adding a field to a database table, which does&#10;  // not require a batch operation:&#10;  $spec = [&#10;    'type' =&gt; 'varchar',&#10;    'description' =&gt; &quot;New Col&quot;,&#10;    'length' =&gt; 20,&#10;    'not null' =&gt; FALSE,&#10;  ];&#10;  $schema = Database::getConnection()&#10;    -&gt;schema();&#10;  $schema&#10;    -&gt;addField('my_table', 'newcol', $spec);&#10;&#10;  // Example of what to do if there is an error during your update.&#10;  if ($some_error_condition_met) {&#10;    throw new UpdateException('Something went wrong; here is what you should do.');&#10;  }&#10;&#10;  // Example function body for a batch update. In this example, the values in&#10;  // a database field are updated.&#10;  if (!isset($sandbox['progress'])) {&#10;&#10;    // This must be the first run. Initialize the sandbox.&#10;    $sandbox['progress'] = 0;&#10;    $sandbox['current_pk'] = 0;&#10;    $sandbox['max'] = Database::getConnection()&#10;      -&gt;query('SELECT COUNT([my_primary_key]) FROM {my_table}')&#10;      -&gt;fetchField();&#10;  }&#10;&#10;  // Update in chunks of 20.&#10;  $records = Database::getConnection()&#10;    -&gt;select('my_table', 'm')&#10;    -&gt;fields('m', [&#10;    'my_primary_key',&#10;    'other_field',&#10;  ])&#10;    -&gt;condition('my_primary_key', $sandbox['current_pk'], '&gt;')&#10;    -&gt;range(0, 20)&#10;    -&gt;orderBy('my_primary_key', 'ASC')&#10;    -&gt;execute();&#10;  foreach ($records as $record) {&#10;&#10;    // Here, you would make an update something related to this record. In this&#10;    // example, some text is added to the other field.&#10;    Database::getConnection()&#10;      -&gt;update('my_table')&#10;      -&gt;fields([&#10;      'other_field' =&gt; $record-&gt;other_field . '-suffix',&#10;    ])&#10;      -&gt;condition('my_primary_key', $record-&gt;my_primary_key)&#10;      -&gt;execute();&#10;    $sandbox['progress']++;&#10;    $sandbox['current_pk'] = $record-&gt;my_primary_key;&#10;  }&#10;  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : $sandbox['progress'] / $sandbox['max'];&#10;&#10;  // To display a message to the user when the update is completed, return it.&#10;  // If you do not want to display a completion message, return nothing.&#10;  return t('All foo bars were updated with the new suffix');&#10;}" shortcut="SPACE" description="hook_update_N()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="N" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_update_projects_alter" value="/**&#10; * Implements hook_update_projects_alter().&#10; */&#10;function $MODULE$_update_projects_alter(&amp;$projects) {&#10;&#10;  // Hide a site-specific module from the list.&#10;  unset($projects['site_specific_module']);&#10;&#10;  // Add a disabled module to the list.&#10;  // The key for the array should be the machine-readable project &quot;short name&quot;.&#10;  $projects['disabled_project_name'] = [&#10;    // Machine-readable project short name (same as the array key above).&#10;    'name' =&gt; 'disabled_project_name',&#10;    // Array of values from the main .info.yml file for this project.&#10;    'info' =&gt; [&#10;      'name' =&gt; 'Some disabled module',&#10;      'description' =&gt; 'A module not enabled on the site that you want to see in the available updates report.',&#10;      'version' =&gt; '8.x-1.0',&#10;      'core' =&gt; '8.x',&#10;      // The maximum file change time (the &quot;ctime&quot; returned by the filectime()&#10;      // PHP method) for all of the .info.yml files included in this project.&#10;      '_info_file_ctime' =&gt; 1243888165,&#10;    ],&#10;    // The date stamp when the project was released, if known. If the disabled&#10;    // project was an officially packaged release from drupal.org, this will&#10;    // be included in the .info.yml file as the 'datestamp' field. This only&#10;    // really matters for development snapshot releases that are regenerated,&#10;    // so it can be left undefined or set to 0 in most cases.&#10;    'datestamp' =&gt; 1243888185,&#10;    // Any modules (or themes) included in this project. Keyed by machine-&#10;    // readable &quot;short name&quot;, value is the human-readable project name printed&#10;    // in the UI.&#10;    'includes' =&gt; [&#10;      'disabled_project' =&gt; 'Disabled module',&#10;      'disabled_project_helper' =&gt; 'Disabled module helper module',&#10;      'disabled_project_foo' =&gt; 'Disabled module foo add-on module',&#10;    ],&#10;    // Does this project contain a 'module', 'theme', 'disabled-module', or&#10;    // 'disabled-theme'?&#10;    'project_type' =&gt; 'disabled-module',&#10;  ];&#10;}" shortcut="SPACE" description="hook_update_projects_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_update_status_alter" value="/**&#10; * Implements hook_update_status_alter().&#10; */&#10;function $MODULE$_update_status_alter(&amp;$projects) {&#10;  $settings = \Drupal::config('update_advanced.settings')&#10;    -&gt;get('projects');&#10;  foreach ($projects as $project =&gt; $project_info) {&#10;    if (isset($settings[$project]) &amp;&amp; isset($settings[$project]['check']) &amp;&amp; ($settings[$project]['check'] == 'never' || isset($project_info['recommended']) &amp;&amp; $settings[$project]['check'] === $project_info['recommended'])) {&#10;      $projects[$project]['status'] = UpdateFetcherInterface::NOT_CHECKED;&#10;      $projects[$project]['reason'] = t('Ignored from settings');&#10;      if (!empty($settings[$project]['notes'])) {&#10;        $projects[$project]['extra'][] = [&#10;          'class' =&gt; [&#10;            'admin-note',&#10;          ],&#10;          'label' =&gt; t('Administrator note'),&#10;          'data' =&gt; $settings[$project]['notes'],&#10;        ];&#10;      }&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_update_status_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_user_cancel" value="/**&#10; * Implements hook_user_cancel().&#10; */&#10;function $MODULE$_user_cancel($edit, UserInterface $account, $method) {&#10;  switch ($method) {&#10;    case 'user_cancel_block_unpublish':&#10;&#10;      // Unpublish nodes (current revisions).&#10;      module_load_include('inc', 'node', 'node.admin');&#10;      $nodes = \Drupal::entityQuery('node')&#10;        -&gt;accessCheck(FALSE)&#10;        -&gt;condition('uid', $account&#10;        -&gt;id())&#10;        -&gt;execute();&#10;      node_mass_update($nodes, [&#10;        'status' =&gt; 0,&#10;      ], NULL, TRUE);&#10;      break;&#10;    case 'user_cancel_reassign':&#10;&#10;      // Anonymize nodes (current revisions).&#10;      module_load_include('inc', 'node', 'node.admin');&#10;      $nodes = \Drupal::entityQuery('node')&#10;        -&gt;accessCheck(FALSE)&#10;        -&gt;condition('uid', $account&#10;        -&gt;id())&#10;        -&gt;execute();&#10;      node_mass_update($nodes, [&#10;        'uid' =&gt; 0,&#10;      ], NULL, TRUE);&#10;&#10;      // Anonymize old revisions.&#10;      \Drupal::database()&#10;        -&gt;update('node_field_revision')&#10;        -&gt;fields([&#10;        'uid' =&gt; 0,&#10;      ])&#10;        -&gt;condition('uid', $account&#10;        -&gt;id())&#10;        -&gt;execute();&#10;      break;&#10;  }&#10;}" shortcut="SPACE" description="hook_user_cancel()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_user_cancel_methods_alter" value="/**&#10; * Implements hook_user_cancel_methods_alter().&#10; */&#10;function $MODULE$_user_cancel_methods_alter(&amp;$methods) {&#10;  $account = \Drupal::currentUser();&#10;&#10;  // Limit access to disable account and unpublish content method.&#10;  $methods['user_cancel_block_unpublish']['access'] = $account&#10;    -&gt;hasPermission('administer site configuration');&#10;&#10;  // Remove the content re-assigning method.&#10;  unset($methods['user_cancel_reassign']);&#10;&#10;  // Add a custom zero-out method.&#10;  $methods['mymodule_zero_out'] = [&#10;    'title' =&gt; t('Delete the account and remove all content.'),&#10;    'description' =&gt; t('All your content will be replaced by empty strings.'),&#10;    // access should be used for administrative methods only.&#10;    'access' =&gt; $account&#10;      -&gt;hasPermission('access zero-out account cancellation method'),&#10;  ];&#10;}" shortcut="SPACE" description="hook_user_cancel_methods_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_user_format_name_alter" value="/**&#10; * Implements hook_user_format_name_alter().&#10; */&#10;function $MODULE$_user_format_name_alter(&amp;$name, AccountInterface $account) {&#10;&#10;  // Display the user's uid instead of name.&#10;  if ($account&#10;    -&gt;id()) {&#10;    $name = t('User @uid', [&#10;      '@uid' =&gt; $account&#10;        -&gt;id(),&#10;    ]);&#10;  }&#10;}" shortcut="SPACE" description="hook_user_format_name_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_user_login" value="/**&#10; * Implements hook_user_login().&#10; */&#10;function $MODULE$_user_login(UserInterface $account) {&#10;  $config = \Drupal::config('system.date');&#10;&#10;  // If the user has a NULL time zone, notify them to set a time zone.&#10;  if (!$account&#10;    -&gt;getTimezone() &amp;&amp; $config&#10;    -&gt;get('timezone.user.configurable') &amp;&amp; $config&#10;    -&gt;get('timezone.user.warn')) {&#10;    \Drupal::messenger()&#10;      -&gt;addStatus(t('Configure your &lt;a href=&quot;:user-edit&quot;&gt;account time zone setting&lt;/a&gt;.', [&#10;      ':user-edit' =&gt; $account&#10;        -&gt;toUrl('edit-form', [&#10;        'query' =&gt; \Drupal::destination()&#10;          -&gt;getAsArray(),&#10;        'fragment' =&gt; 'edit-timezone',&#10;      ])&#10;        -&gt;toString(),&#10;    ]));&#10;  }&#10;}" shortcut="SPACE" description="hook_user_login()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_user_logout" value="/**&#10; * Implements hook_user_logout().&#10; */&#10;function $MODULE$_user_logout(AccountInterface $account) {&#10;  \Drupal::database()&#10;    -&gt;insert('logouts')&#10;    -&gt;fields([&#10;    'uid' =&gt; $account&#10;      -&gt;id(),&#10;    'time' =&gt; time(),&#10;  ])&#10;    -&gt;execute();&#10;}" shortcut="SPACE" description="hook_user_logout()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_validation_constraint_alter" value="/**&#10; * Implements hook_validation_constraint_alter().&#10; */&#10;function $MODULE$_validation_constraint_alter(array &amp;$definitions) {&#10;  $definitions['Null']['class'] = '\\Drupal\\mymodule\\Plugin\\Validation\\Constraints\\MyClass';&#10;}" shortcut="SPACE" description="hook_validation_constraint_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_verify_update_archive" value="/**&#10; * Implements hook_verify_update_archive().&#10; */&#10;function $MODULE$_verify_update_archive($project, $archive_file, $directory) {&#10;  $errors = [];&#10;  if (!file_exists($directory)) {&#10;    $errors[] = t('The %directory does not exist.', [&#10;      '%directory' =&gt; $directory,&#10;    ]);&#10;  }&#10;&#10;  // Add other checks on the archive integrity here.&#10;  return $errors;&#10;}" shortcut="SPACE" description="hook_verify_update_archive()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_analyze" value="/**&#10; * Implements hook_views_analyze().&#10; */&#10;function $MODULE$_views_analyze(Drupal\views\ViewExecutable $view) {&#10;  $messages = [];&#10;  if ($view-&gt;display_handler-&gt;options['pager']['type'] == 'none') {&#10;    $messages[] = Drupal\views\Analyzer::formatMessage(t('This view has no pager. This could cause performance issues when the view contains many items.'), 'warning');&#10;  }&#10;  return $messages;&#10;}" shortcut="SPACE" description="hook_views_analyze()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_data" value="/**&#10; * Implements hook_views_data().&#10; */&#10;function $MODULE$_views_data() {&#10;&#10;  // This example describes how to write hook_views_data() for a table defined&#10;  // like this:&#10;  // CREATE TABLE example_table (&#10;  //   nid INT(11) NOT NULL         COMMENT 'Primary key: {node}.nid.',&#10;  //   plain_text_field VARCHAR(32) COMMENT 'Just a plain text field.',&#10;  //   numeric_field INT(11)        COMMENT 'Just a numeric field.',&#10;  //   boolean_field INT(1)         COMMENT 'Just an on/off field.',&#10;  //   timestamp_field INT(8)       COMMENT 'Just a timestamp field.',&#10;  //   langcode VARCHAR(12)         COMMENT 'Language code field.',&#10;  //   PRIMARY KEY(nid)&#10;  // );&#10;  // Define the return array.&#10;  $data = [];&#10;&#10;  // The outermost keys of $data are Views table names, which should usually&#10;  // be the same as the hook_schema() table names.&#10;  $data['example_table'] = [];&#10;&#10;  // The value corresponding to key 'table' gives properties of the table&#10;  // itself.&#10;  $data['example_table']['table'] = [];&#10;&#10;  // Within 'table', the value of 'group' (translated string) is used as a&#10;  // prefix in Views UI for this table's fields, filters, etc. When adding&#10;  // a field, filter, etc. you can also filter by the group.&#10;  $data['example_table']['table']['group'] = t('Example table');&#10;&#10;  // Within 'table', the value of 'provider' is the module that provides schema&#10;  // or the entity type that causes the table to exist. Setting this ensures&#10;  // that views have the correct dependencies. This is automatically set to the&#10;  // module that implements hook_views_data().&#10;  $data['example_table']['table']['provider'] = 'example_module';&#10;&#10;  // Some tables are &quot;base&quot; tables, meaning that they can be the base tables&#10;  // for views. Non-base tables can only be brought in via relationships in&#10;  // views based on other tables. To define a table to be a base table, add&#10;  // key 'base' to the 'table' array:&#10;  $data['example_table']['table']['base'] = [&#10;    // Identifier (primary) field in this table for Views.&#10;    'field' =&gt; 'nid',&#10;    // Label in the UI.&#10;    'title' =&gt; t('Example table'),&#10;    // Longer description in the UI. Required.&#10;    'help' =&gt; t('Example table contains example content and can be related to nodes.'),&#10;    'weight' =&gt; -10,&#10;  ];&#10;&#10;  // Some tables have an implicit, automatic relationship to other tables,&#10;  // meaning that when the other table is available in a view (either as the&#10;  // base table or through a relationship), this table's fields, filters, etc.&#10;  // are automatically made available without having to add an additional&#10;  // relationship. To define an implicit relationship that will make your&#10;  // table automatically available when another table is present, add a 'join'&#10;  // section to your 'table' section. Note that it is usually only a good idea&#10;  // to do this for one-to-one joins, because otherwise your automatic join&#10;  // will add more rows to the view. It is also not a good idea to do this if&#10;  // most views won't need your table -- if that is the case, define a&#10;  // relationship instead (see below).&#10;  //&#10;  // If you've decided an automatic join is a good idea, here's how to do it;&#10;  // the resulting SQL query will look something like this:&#10;  //   ... FROM example_table et ... JOIN node_field_data nfd&#10;  //   ON et.nid = nfd.nid AND ('extra' clauses will be here) ...&#10;  // although the table aliases will be different.&#10;  $data['example_table']['table']['join'] = [&#10;    // Within the 'join' section, list one or more tables to automatically&#10;    // join to. In this example, every time 'node_field_data' is available in&#10;    // a view, 'example_table' will be too. The array keys here are the array&#10;    // keys for the other tables, given in their hook_views_data()&#10;    // implementations. If the table listed here is from another module's&#10;    // hook_views_data() implementation, make sure your module depends on that&#10;    // other module.&#10;    'node_field_data' =&gt; [&#10;      // Primary key field in node_field_data to use in the join.&#10;      'left_field' =&gt; 'nid',&#10;      // Foreign key field in example_table to use in the join.&#10;      'field' =&gt; 'nid',&#10;      // 'extra' is an array of additional conditions on the join.&#10;      'extra' =&gt; [&#10;        0 =&gt; [&#10;          // Adds AND node_field_data.published = TRUE to the join.&#10;          'field' =&gt; 'published',&#10;          'value' =&gt; TRUE,&#10;        ],&#10;        1 =&gt; [&#10;          // Adds AND example_table.numeric_field = 1 to the join.&#10;          'left_field' =&gt; 'numeric_field',&#10;          'value' =&gt; 1,&#10;          // If true, the value will not be surrounded in quotes.&#10;          'numeric' =&gt; TRUE,&#10;        ],&#10;        2 =&gt; [&#10;          // Adds AND example_table.boolean_field &lt;&gt;&#10;          // node_field_data.published to the join.&#10;          'field' =&gt; 'published',&#10;          'left_field' =&gt; 'boolean_field',&#10;          // The operator used, Defaults to &quot;=&quot;.&#10;          'operator' =&gt; '!=',&#10;        ],&#10;      ],&#10;    ],&#10;  ];&#10;&#10;  // You can also do a more complex join, where in order to get to a certain&#10;  // base table defined in a hook_views_data() implementation, you will join&#10;  // to a different table that Views knows how to auto-join to the base table.&#10;  // For instance, if another module that your module depends on had&#10;  // defined a table 'foo' with an automatic join to 'node_field_table' (as&#10;  // shown above), you could join to 'node_field_table' via the 'foo' table.&#10;  // Here's how to do this, and the resulting SQL query would look something&#10;  // like this:&#10;  //   ... FROM example_table et ... JOIN foo foo&#10;  //   ON et.nid = foo.nid AND ('extra' clauses will be here) ...&#10;  //   JOIN node_field_data nfd ON (definition of the join from the foo&#10;  //   module goes here) ...&#10;  // although the table aliases will be different.&#10;  $data['example_table']['table']['join']['node_field_data'] = [&#10;    // 'node_field_data' above is the base we're joining to in Views.&#10;    // 'left_table' is the table we're actually joining to, in order to get to&#10;    // 'node_field_data'. It has to be something that Views knows how to join&#10;    // to 'node_field_data'.&#10;    'left_table' =&gt; 'foo',&#10;    'left_field' =&gt; 'nid',&#10;    'field' =&gt; 'nid',&#10;    // 'extra' is an array of additional conditions on the join.&#10;    'extra' =&gt; [&#10;      // This syntax matches additional fields in the two tables:&#10;      // ... AND foo.langcode = example_table.langcode ...&#10;      [&#10;        'left_field' =&gt; 'langcode',&#10;        'field' =&gt; 'langcode',&#10;      ],&#10;      // This syntax adds a condition on our table. 'operator' defaults to&#10;      // '=' for non-array values, or 'IN' for array values.&#10;      // ... AND example_table.numeric_field &gt; 0 ...&#10;      [&#10;        'field' =&gt; 'numeric_field',&#10;        'value' =&gt; 0,&#10;        'numeric' =&gt; TRUE,&#10;        'operator' =&gt; '&gt;',&#10;      ],&#10;    ],&#10;  ];&#10;&#10;  // Other array elements at the top level of your table's array describe&#10;  // individual database table fields made available to Views. The array keys&#10;  // are the names (unique within the table) used by Views for the fields,&#10;  // usually equal to the database field names.&#10;  //&#10;  // Each field entry must have the following elements:&#10;  // - title: Translated label for the field in the UI.&#10;  // - help: Description of the field in the UI.&#10;  //&#10;  // Each field entry may also have one or more of the following elements,&#10;  // describing &quot;handlers&quot; (plugins) for the field:&#10;  // - relationship: Specifies a handler that allows this field to be used&#10;  //   to define a relationship to another table in Views.&#10;  // - field: Specifies a handler to make it available to Views as a field.&#10;  // - filter: Specifies a handler to make it available to Views as a filter.&#10;  // - sort: Specifies a handler to make it available to Views as a sort.&#10;  // - argument: Specifies a handler to make it available to Views as an&#10;  //   argument, or contextual filter as it is known in the UI.&#10;  // - area: Specifies a handler to make it available to Views to add content&#10;  //   to the header, footer, or as no result behavior.&#10;  //&#10;  // Note that when specifying handlers, you must give the handler plugin ID&#10;  // and you may also specify overrides for various settings that make up the&#10;  // plugin definition. See examples below; the Boolean example demonstrates&#10;  // setting overrides.&#10;  // Node ID field, exposed as relationship only, since it is a foreign key&#10;  // in this table.&#10;  $data['example_table']['nid'] = [&#10;    'title' =&gt; t('Example content'),&#10;    'help' =&gt; t('Relate example content to the node content'),&#10;    // Define a relationship to the node_field_data table, so views whose&#10;    // base table is example_table can add a relationship to nodes. To make a&#10;    // relationship in the other direction, you can:&#10;    // - Use hook_views_data_alter() -- see the function body example on that&#10;    //   hook for details.&#10;    // - Use the implicit join method described above.&#10;    'relationship' =&gt; [&#10;      // Views name of the table to join to for the relationship.&#10;      'base' =&gt; 'node_field_data',&#10;      // Database field name in the other table to join on.&#10;      'base field' =&gt; 'nid',&#10;      // ID of relationship handler plugin to use.&#10;      'id' =&gt; 'standard',&#10;      // Default label for relationship in the UI.&#10;      'label' =&gt; t('Example node'),&#10;    ],&#10;  ];&#10;&#10;  // Plain text field, exposed as a field, sort, filter, and argument.&#10;  $data['example_table']['plain_text_field'] = [&#10;    'title' =&gt; t('Plain text field'),&#10;    'help' =&gt; t('Just a plain text field.'),&#10;    'field' =&gt; [&#10;      // ID of field handler plugin to use.&#10;      'id' =&gt; 'standard',&#10;    ],&#10;    'sort' =&gt; [&#10;      // ID of sort handler plugin to use.&#10;      'id' =&gt; 'standard',&#10;    ],&#10;    'filter' =&gt; [&#10;      // ID of filter handler plugin to use.&#10;      'id' =&gt; 'string',&#10;    ],&#10;    'argument' =&gt; [&#10;      // ID of argument handler plugin to use.&#10;      'id' =&gt; 'string',&#10;    ],&#10;  ];&#10;&#10;  // Numeric field, exposed as a field, sort, filter, and argument.&#10;  $data['example_table']['numeric_field'] = [&#10;    'title' =&gt; t('Numeric field'),&#10;    'help' =&gt; t('Just a numeric field.'),&#10;    'field' =&gt; [&#10;      // ID of field handler plugin to use.&#10;      'id' =&gt; 'numeric',&#10;    ],&#10;    'sort' =&gt; [&#10;      // ID of sort handler plugin to use.&#10;      'id' =&gt; 'standard',&#10;    ],&#10;    'filter' =&gt; [&#10;      // ID of filter handler plugin to use.&#10;      'id' =&gt; 'numeric',&#10;    ],&#10;    'argument' =&gt; [&#10;      // ID of argument handler plugin to use.&#10;      'id' =&gt; 'numeric',&#10;    ],&#10;  ];&#10;&#10;  // Boolean field, exposed as a field, sort, and filter. The filter section&#10;  // illustrates overriding various settings.&#10;  $data['example_table']['boolean_field'] = [&#10;    'title' =&gt; t('Boolean field'),&#10;    'help' =&gt; t('Just an on/off field.'),&#10;    'field' =&gt; [&#10;      // ID of field handler plugin to use.&#10;      'id' =&gt; 'boolean',&#10;    ],&#10;    'sort' =&gt; [&#10;      // ID of sort handler plugin to use.&#10;      'id' =&gt; 'standard',&#10;    ],&#10;    'filter' =&gt; [&#10;      // ID of filter handler plugin to use.&#10;      'id' =&gt; 'boolean',&#10;      // Override the generic field title, so that the filter uses a different&#10;      // label in the UI.&#10;      'label' =&gt; t('Published'),&#10;      // Override the default BooleanOperator filter handler's 'type' setting,&#10;      // to display this as a &quot;Yes/No&quot; filter instead of a &quot;True/False&quot; filter.&#10;      'type' =&gt; 'yes-no',&#10;      // Override the default Boolean filter handler's 'use_equal' setting, to&#10;      // make the query use 'boolean_field = 1' instead of 'boolean_field &lt;&gt; 0'.&#10;      'use_equal' =&gt; TRUE,&#10;    ],&#10;  ];&#10;&#10;  // Integer timestamp field, exposed as a field, sort, and filter.&#10;  $data['example_table']['timestamp_field'] = [&#10;    'title' =&gt; t('Timestamp field'),&#10;    'help' =&gt; t('Just a timestamp field.'),&#10;    'field' =&gt; [&#10;      // ID of field handler plugin to use.&#10;      'id' =&gt; 'date',&#10;    ],&#10;    'sort' =&gt; [&#10;      // ID of sort handler plugin to use.&#10;      'id' =&gt; 'date',&#10;    ],&#10;    'filter' =&gt; [&#10;      // ID of filter handler plugin to use.&#10;      'id' =&gt; 'date',&#10;    ],&#10;  ];&#10;&#10;  // Area example. Areas are not generally associated with actual data&#10;  // tables and fields. This example is from views_views_data(), which defines&#10;  // the &quot;Global&quot; table (not really a table, but a group of Fields, Filters,&#10;  // etc. that are grouped into section &quot;Global&quot; in the UI). Here's the&#10;  // definition of the generic &quot;Text area&quot;:&#10;  $data['views']['area'] = [&#10;    'title' =&gt; t('Text area'),&#10;    'help' =&gt; t('Provide markup text for the area.'),&#10;    'area' =&gt; [&#10;      // ID of the area handler plugin to use.&#10;      'id' =&gt; 'text',&#10;    ],&#10;  ];&#10;  return $data;&#10;}" shortcut="SPACE" description="hook_views_data()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_data_alter" value="/**&#10; * Implements hook_views_data_alter().&#10; */&#10;function $MODULE$_views_data_alter(array &amp;$data) {&#10;&#10;  // Alter the title of the node_field_data:nid field in the Views UI.&#10;  $data['node_field_data']['nid']['title'] = t('Node-Nid');&#10;&#10;  // Add an additional field to the users_field_data table.&#10;  $data['users_field_data']['example_field'] = [&#10;    'title' =&gt; t('Example field'),&#10;    'help' =&gt; t('Some example content that references a user'),&#10;    'field' =&gt; [&#10;      // ID of the field handler to use.&#10;      'id' =&gt; 'example_field',&#10;    ],&#10;  ];&#10;&#10;  // Change the handler of the node title field, presumably to a handler plugin&#10;  // you define in your module. Give the ID of this plugin.&#10;  $data['node_field_data']['title']['field']['id'] = 'node_title';&#10;&#10;  // Add a relationship that will allow a view whose base table is 'foo' (from&#10;  // another module) to have a relationship to 'example_table' (from my module),&#10;  // via joining foo.fid to example_table.eid.&#10;  //&#10;  // This relationship has to be added to the 'foo' Views data, which my module&#10;  // does not control, so it must be done in hook_views_data_alter(), not&#10;  // hook_views_data().&#10;  //&#10;  // In Views data definitions, each field can have only one relationship. So&#10;  // rather than adding this relationship directly to the $data['foo']['fid']&#10;  // field entry, which could overwrite an existing relationship, we define&#10;  // a dummy field key to handle the relationship.&#10;  $data['foo']['unique_dummy_name'] = [&#10;    'title' =&gt; t('Title seen while adding relationship'),&#10;    'help' =&gt; t('More information about the relationship'),&#10;    'relationship' =&gt; [&#10;      // Views name of the table being joined to from foo.&#10;      'base' =&gt; 'example_table',&#10;      // Database field name in example_table for the join.&#10;      'base field' =&gt; 'eid',&#10;      // Real database field name in foo for the join, to override&#10;      // 'unique_dummy_name'.&#10;      'field' =&gt; 'fid',&#10;      // ID of relationship handler plugin to use.&#10;      'id' =&gt; 'standard',&#10;      'label' =&gt; t('Default label for relationship'),&#10;    ],&#10;  ];&#10;&#10;  // Note that the $data array is not returned – it is modified by reference.&#10;}" shortcut="SPACE" description="hook_views_data_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_form_substitutions" value="/**&#10; * Implements hook_views_form_substitutions().&#10; */&#10;function $MODULE$_views_form_substitutions() {&#10;  return [&#10;    '&lt;!--views-form-example-substitutions--&gt;' =&gt; 'Example Substitution',&#10;  ];&#10;}" shortcut="SPACE" description="hook_views_form_substitutions()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_invalidate_cache" value="/**&#10; * Implements hook_views_invalidate_cache().&#10; */&#10;function $MODULE$_views_invalidate_cache() {&#10;  \Drupal\Core\Cache\Cache::invalidateTags([&#10;    'views',&#10;  ]);&#10;}" shortcut="SPACE" description="hook_views_invalidate_cache()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_access_alter" value="/**&#10; * Implements hook_views_plugins_access_alter().&#10; */&#10;function $MODULE$_views_plugins_access_alter(array &amp;$plugins) {&#10;&#10;  // Remove the available plugin because the users should not have access to it.&#10;  unset($plugins['role']);&#10;}" shortcut="SPACE" description="hook_views_plugins_access_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_area_alter" value="/**&#10; * Implements hook_views_plugins_area_alter().&#10; */&#10;function $MODULE$_views_plugins_area_alter(array &amp;$plugins) {&#10;&#10;  // Change the 'title' handler class.&#10;  $plugins['title']['class'] = 'Drupal\\example\\ExampleClass';&#10;}" shortcut="SPACE" description="hook_views_plugins_area_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_argument_alter" value="/**&#10; * Implements hook_views_plugins_argument_alter().&#10; */&#10;function $MODULE$_views_plugins_argument_alter(array &amp;$plugins) {&#10;&#10;  // Change the 'title' handler class.&#10;  $plugins['title']['class'] = 'Drupal\\example\\ExampleClass';&#10;}" shortcut="SPACE" description="hook_views_plugins_argument_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_argument_default_alter" value="/**&#10; * Implements hook_views_plugins_argument_default_alter().&#10; */&#10;function $MODULE$_views_plugins_argument_default_alter(array &amp;$plugins) {&#10;&#10;  // Remove the available plugin because the users should not have access to it.&#10;  unset($plugins['php']);&#10;}" shortcut="SPACE" description="hook_views_plugins_argument_default_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_argument_validator_alter" value="/**&#10; * Implements hook_views_plugins_argument_validator_alter().&#10; */&#10;function $MODULE$_views_plugins_argument_validator_alter(array &amp;$plugins) {&#10;&#10;  // Remove the available plugin because the users should not have access to it.&#10;  unset($plugins['php']);&#10;}" shortcut="SPACE" description="hook_views_plugins_argument_validator_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_cache_alter" value="/**&#10; * Implements hook_views_plugins_cache_alter().&#10; */&#10;function $MODULE$_views_plugins_cache_alter(array &amp;$plugins) {&#10;&#10;  // Change the title.&#10;  $plugins['time']['title'] = t('Custom title');&#10;}" shortcut="SPACE" description="hook_views_plugins_cache_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_display_alter" value="/**&#10; * Implements hook_views_plugins_display_alter().&#10; */&#10;function $MODULE$_views_plugins_display_alter(array &amp;$plugins) {&#10;&#10;  // Alter the title of an existing plugin.&#10;  $plugins['rest_export']['title'] = t('Export');&#10;}" shortcut="SPACE" description="hook_views_plugins_display_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_display_extenders_alter" value="/**&#10; * Implements hook_views_plugins_display_extenders_alter().&#10; */&#10;function $MODULE$_views_plugins_display_extenders_alter(array &amp;$plugins) {&#10;&#10;  // Alter the title of an existing plugin.&#10;  $plugins['time']['title'] = t('Custom title');&#10;}" shortcut="SPACE" description="hook_views_plugins_display_extenders_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_exposed_form_alter" value="/**&#10; * Implements hook_views_plugins_exposed_form_alter().&#10; */&#10;function $MODULE$_views_plugins_exposed_form_alter(array &amp;$plugins) {&#10;&#10;  // Remove the available plugin because the users should not have access to it.&#10;  unset($plugins['input_required']);&#10;}" shortcut="SPACE" description="hook_views_plugins_exposed_form_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_field_alter" value="/**&#10; * Implements hook_views_plugins_field_alter().&#10; */&#10;function $MODULE$_views_plugins_field_alter(array &amp;$plugins) {&#10;&#10;  // Change the 'title' handler class.&#10;  $plugins['title']['class'] = 'Drupal\\example\\ExampleClass';&#10;}" shortcut="SPACE" description="hook_views_plugins_field_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_filter_alter" value="/**&#10; * Implements hook_views_plugins_filter_alter().&#10; */&#10;function $MODULE$_views_plugins_filter_alter(array &amp;$plugins) {&#10;&#10;  // Change the 'title' handler class.&#10;  $plugins['title']['class'] = 'Drupal\\example\\ExampleClass';&#10;}" shortcut="SPACE" description="hook_views_plugins_filter_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_join_alter" value="/**&#10; * Implements hook_views_plugins_join_alter().&#10; */&#10;function $MODULE$_views_plugins_join_alter(array &amp;$plugins) {&#10;&#10;  // Print out all join plugin names for debugging purposes.&#10;  debug($plugins);&#10;}" shortcut="SPACE" description="hook_views_plugins_join_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_pager_alter" value="/**&#10; * Implements hook_views_plugins_pager_alter().&#10; */&#10;function $MODULE$_views_plugins_pager_alter(array &amp;$plugins) {&#10;&#10;  // Remove the sql based plugin to force good performance.&#10;  unset($plugins['full']);&#10;}" shortcut="SPACE" description="hook_views_plugins_pager_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_query_alter" value="/**&#10; * Implements hook_views_plugins_query_alter().&#10; */&#10;function $MODULE$_views_plugins_query_alter(array &amp;$plugins) {&#10;&#10;  // Print out all query plugin names for debugging purposes.&#10;  debug($plugins);&#10;}" shortcut="SPACE" description="hook_views_plugins_query_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_relationship_alter" value="/**&#10; * Implements hook_views_plugins_relationship_alter().&#10; */&#10;function $MODULE$_views_plugins_relationship_alter(array &amp;$plugins) {&#10;&#10;  // Change the 'title' handler class.&#10;  $plugins['title']['class'] = 'Drupal\\example\\ExampleClass';&#10;}" shortcut="SPACE" description="hook_views_plugins_relationship_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_row_alter" value="/**&#10; * Implements hook_views_plugins_row_alter().&#10; */&#10;function $MODULE$_views_plugins_row_alter(array &amp;$plugins) {&#10;&#10;  // Change the used class of a plugin.&#10;  $plugins['entity:node']['class'] = 'Drupal\\node\\Plugin\\views\\row\\NodeRow';&#10;  $plugins['entity:node']['module'] = 'node';&#10;}" shortcut="SPACE" description="hook_views_plugins_row_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_sort_alter" value="/**&#10; * Implements hook_views_plugins_sort_alter().&#10; */&#10;function $MODULE$_views_plugins_sort_alter(array &amp;$plugins) {&#10;&#10;  // Change the 'title' handler class.&#10;  $plugins['title']['class'] = 'Drupal\\example\\ExampleClass';&#10;}" shortcut="SPACE" description="hook_views_plugins_sort_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_style_alter" value="/**&#10; * Implements hook_views_plugins_style_alter().&#10; */&#10;function $MODULE$_views_plugins_style_alter(array &amp;$plugins) {&#10;&#10;  // Change the theme hook of a plugin.&#10;  $plugins['html_list']['theme'] = 'custom_views_view_list';&#10;}" shortcut="SPACE" description="hook_views_plugins_style_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_plugins_wizard_alter" value="/**&#10; * Implements hook_views_plugins_wizard_alter().&#10; */&#10;function $MODULE$_views_plugins_wizard_alter(array &amp;$plugins) {&#10;&#10;  // Change the title of a plugin.&#10;  $plugins['node_revision']['title'] = t('Node revision wizard');&#10;}" shortcut="SPACE" description="hook_views_plugins_wizard_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_post_build" value="/**&#10; * Implements hook_views_post_build().&#10; */&#10;function $MODULE$_views_post_build(ViewExecutable $view) {&#10;&#10;  // If the exposed field 'type' is set, hide the column containing the content&#10;  // type. (Note that this is a solution for a particular view, and makes&#10;  // assumptions about both exposed filter settings and the fields in the view.&#10;  // Also note that this alter could be done at any point before the view being&#10;  // rendered.)&#10;  if ($view&#10;    -&gt;id() == 'my_view' &amp;&amp; isset($view-&gt;exposed_raw_input['type']) &amp;&amp; $view-&gt;exposed_raw_input['type'] != 'All') {&#10;&#10;    // 'Type' should be interpreted as content type.&#10;    if (isset($view-&gt;field['type'])) {&#10;      $view-&gt;field['type']-&gt;options['exclude'] = TRUE;&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_views_post_build()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_post_execute" value="/**&#10; * Implements hook_views_post_execute().&#10; */&#10;function $MODULE$_views_post_execute(ViewExecutable $view) {&#10;&#10;  // If there are more than 100 results, show a message that encourages the user&#10;  // to change the filter settings.&#10;  // (This action could be performed later in the execution process, but not&#10;  // earlier.)&#10;  if ($view-&gt;total_rows &gt; 100) {&#10;    \Drupal::messenger()&#10;      -&gt;addStatus(t('You have more than 100 hits. Use the filter settings to narrow down your list.'));&#10;  }&#10;}" shortcut="SPACE" description="hook_views_post_execute()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_post_render" value="/**&#10; * Implements hook_views_post_render().&#10; */&#10;function $MODULE$_views_post_render(ViewExecutable $view, &amp;$output, CachePluginBase $cache) {&#10;&#10;  // When using full pager, disable any time-based caching if there are fewer&#10;  // than 10 results.&#10;  if ($view-&gt;pager instanceof Drupal\views\Plugin\views\pager\Full &amp;&amp; $cache instanceof Drupal\views\Plugin\views\cache\Time &amp;&amp; count($view-&gt;result) &lt; 10) {&#10;    $cache-&gt;options['results_lifespan'] = 0;&#10;    $cache-&gt;options['output_lifespan'] = 0;&#10;  }&#10;}" shortcut="SPACE" description="hook_views_post_render()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_preview_info_alter" value="/**&#10; * Implements hook_views_preview_info_alter().&#10; */&#10;function $MODULE$_views_preview_info_alter(array &amp;$rows, ViewExecutable $view) {&#10;&#10;  // Adds information about the tables being queried by the view to the query&#10;  // part of the info box.&#10;  $rows['query'][] = [&#10;    t('&lt;strong&gt;Table queue&lt;/strong&gt;'),&#10;    count($view-&gt;query-&gt;table_queue) . ': (' . implode(', ', array_keys($view-&gt;query-&gt;table_queue)) . ')',&#10;  ];&#10;}" shortcut="SPACE" description="hook_views_preview_info_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_pre_build" value="/**&#10; * Implements hook_views_pre_build().&#10; */&#10;function $MODULE$_views_pre_build(ViewExecutable $view) {&#10;&#10;  // Because of some inexplicable business logic, we should remove all&#10;  // attachments from all views on Mondays.&#10;  // (This alter could be done later in the execution process as well.)&#10;  if (date('D') == 'Mon') {&#10;    unset($view-&gt;attachment_before);&#10;    unset($view-&gt;attachment_after);&#10;  }&#10;}" shortcut="SPACE" description="hook_views_pre_build()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_pre_execute" value="/**&#10; * Implements hook_views_pre_execute().&#10; */&#10;function $MODULE$_views_pre_execute(ViewExecutable $view) {&#10;&#10;  // Whenever a view queries more than two tables, show a message that notifies&#10;  // view administrators that the query might be heavy.&#10;  // (This action could be performed later in the execution process, but not&#10;  // earlier.)&#10;  $account = \Drupal::currentUser();&#10;  if (count($view-&gt;query-&gt;tables) &gt; 2 &amp;&amp; $account&#10;    -&gt;hasPermission('administer views')) {&#10;    \Drupal::messenger()&#10;      -&gt;addWarning(t('The view %view may be heavy to execute.', [&#10;      '%view' =&gt; $view&#10;        -&gt;id(),&#10;    ]));&#10;  }&#10;}" shortcut="SPACE" description="hook_views_pre_execute()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_pre_render" value="/**&#10; * Implements hook_views_pre_render().&#10; */&#10;function $MODULE$_views_pre_render(ViewExecutable $view) {&#10;&#10;  // Scramble the order of the rows shown on this result page.&#10;  // Note that this could be done earlier, but not later in the view execution&#10;  // process.&#10;  shuffle($view-&gt;result);&#10;}" shortcut="SPACE" description="hook_views_pre_render()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_pre_view" value="/**&#10; * Implements hook_views_pre_view().&#10; */&#10;function $MODULE$_views_pre_view(ViewExecutable $view, $display_id, array &amp;$args) {&#10;&#10;  // Modify contextual filters for my_special_view if user has 'my special permission'.&#10;  $account = \Drupal::currentUser();&#10;  if ($view&#10;    -&gt;id() == 'my_special_view' &amp;&amp; $account&#10;    -&gt;hasPermission('my special permission') &amp;&amp; $display_id == 'public_display') {&#10;    $args[0] = 'custom value';&#10;  }&#10;}" shortcut="SPACE" description="hook_views_pre_view()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_query_alter" value="/**&#10; * Implements hook_views_query_alter().&#10; */&#10;function $MODULE$_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {&#10;&#10;  // (Example assuming a view with an exposed filter on node title.)&#10;  // If the input for the title filter is a positive integer, filter against&#10;  // node ID instead of node title.&#10;  if ($view&#10;    -&gt;id() == 'my_view' &amp;&amp; is_numeric($view-&gt;exposed_raw_input['title']) &amp;&amp; $view-&gt;exposed_raw_input['title'] &gt; 0) {&#10;&#10;    // Traverse through the 'where' part of the query.&#10;    foreach ($query-&gt;where as &amp;$condition_group) {&#10;      foreach ($condition_group['conditions'] as &amp;$condition) {&#10;&#10;        // If this is the part of the query filtering on title, change the&#10;        // condition to filter on node ID.&#10;        if ($condition['field'] == 'node.title') {&#10;          $condition = [&#10;            'field' =&gt; 'node.nid',&#10;            'value' =&gt; $view-&gt;exposed_raw_input['title'],&#10;            'operator' =&gt; '=',&#10;          ];&#10;        }&#10;      }&#10;    }&#10;  }&#10;}" shortcut="SPACE" description="hook_views_query_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_query_substitutions" value="/**&#10; * Implements hook_views_query_substitutions().&#10; */&#10;function $MODULE$_views_query_substitutions(ViewExecutable $view) {&#10;&#10;  // Example from views_views_query_substitutions().&#10;  return [&#10;    '***CURRENT_VERSION***' =&gt; \Drupal::VERSION,&#10;    '***CURRENT_TIME***' =&gt; REQUEST_TIME,&#10;    '***LANGUAGE_language_content***' =&gt; \Drupal::languageManager()&#10;      -&gt;getCurrentLanguage(LanguageInterface::TYPE_CONTENT)&#10;      -&gt;getId(),&#10;    PluginBase::VIEWS_QUERY_LANGUAGE_SITE_DEFAULT =&gt; \Drupal::languageManager()&#10;      -&gt;getDefaultLanguage()&#10;      -&gt;getId(),&#10;  ];&#10;}" shortcut="SPACE" description="hook_views_query_substitutions()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_ui_display_tab_alter" value="/**&#10; * Implements hook_views_ui_display_tab_alter().&#10; */&#10;function $MODULE$_views_ui_display_tab_alter(&amp;$build, \Drupal\views_ui\ViewUI $view, $display_id) {&#10;  $build['custom']['#markup'] = 'This text should always appear';&#10;}" shortcut="SPACE" description="hook_views_ui_display_tab_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_ui_display_top_alter" value="/**&#10; * Implements hook_views_ui_display_top_alter().&#10; */&#10;function $MODULE$_views_ui_display_top_alter(&amp;$build, \Drupal\views_ui\ViewUI $view, $display_id) {&#10;  $build['custom']['#markup'] = 'This text should always appear';&#10;}" shortcut="SPACE" description="hook_views_ui_display_top_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="hook_views_ui_display_top_links_alter" value="/**&#10; * Implements hook_views_ui_display_top_links_alter().&#10; */&#10;function $MODULE$_views_ui_display_top_links_alter(array &amp;$links, ViewExecutable $view, $display_id) {&#10;&#10;  // Put the export link first in the list.&#10;  if (isset($links['export'])) {&#10;    $links = [&#10;      'export' =&gt; $links['export'],&#10;    ] + $links;&#10;  }&#10;}" shortcut="SPACE" description="hook_views_ui_display_top_links_alter()" toReformat="true" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
</templateSet>